
options {
	STATIC = false;
	DEBUG_PARSER = false;
	UNICODE_INPUT = true;
	JAVA_UNICODE_ESCAPE = true;
	TOKEN_MANAGER_USES_PARSER = true;
}


PARSER_BEGIN(Parser)

package List;

import static java.lang.Integer.parseInt;
import static java.lang.System.getProperty;
import static java.lang.System.in;
import static java.lang.System.out;
import static Wat.Utility.$;
import static Wat.Utility.classForName;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

import Wat.Utility;

@SuppressWarnings("all")
public class Parser {
	
	public static Object string = new Object() {
		@Override public String toString() { return "#string"; }
	};
	public static Object eof = new Object() {
		@Override public String toString() { return "#eof"; }
	};
	
	/* static=true
	public static <T> T parse(String line) throws Exception {
		// E' necessario inizializzare jj_input_stream con un SimpleCharStream!
		if (jj_input_stream == null) jj_input_stream = new SimpleCharStream((Reader) null);
		ReInit(new StringReader(line));
		return (T) parse();
	}
	//*/
	
	// static=false
	public static Object[] toByteCode(String str) throws Exception {
		return new Parser(str).parse();
	}
	
	public Parser(String line) {
		this(new StringReader(line));
	}
	
	public static void main(String args []) throws Exception {
		main1(args);
	}
	
	public static void main0(String[] args) throws Exception {
		Parser parser = new Parser(in, "UTF-8"); // static=false
		for (;;) {
		  	out.print(">");
			Object o = parser.Elt();
			if (eof.equals(o)) {out.println("\n" + o); break; }
			out.println("OK: " + toString(o));
		}
	}
	
	public static void main1(String[] args) throws Exception {
		//out.println(Charset.defaultCharset());
		//out.println(getProperty("stdout.encoding"));
		boolean expr = true;
		for (;;) {
			String line = Wat.Utility.read();
			if (line.equals("")) break;
			if (line.equals("\n")) continue;
			var cmd = line.substring(0,line.length()-1);
			if (cmd.equals("!end"))
				break;
			else if (cmd.equals("!expr"))
				expr = true;
			else if (cmd.equals("!token"))
				expr = false;
			else try {
				out.print(line);
				Parser parser = new Parser(line); // static=false
 				if (expr) {
					Object o = parser.parse();
					out.println("OK: " + toString(o));
				}
				else {
					for(;;) {
						Token token = parser.getNextToken();
						if (token.kind == 0) break;
						out.printf("%s:\t%s\n", ParserConstants.tokenImage[token.kind], token.image);
					}
				}
			}
			catch (Exception e) {
				out.println("NOK! " /*+ e.getMessage()*/);
				e.printStackTrace(System.out);
			}
			catch (Error e) {
				out.println("Oops! " /*+ e.getMessage()*/);
				e.printStackTrace(out);
			}
		}
		out.println("finito!");
	}
	
	public static String toString(Object o) {
		if (o == null) return "null";
		if (o instanceof String) return "\"" + Utility.toSource((String) o) + "\"";
		if (o instanceof Object[]) {  
			StringBuffer sb = new StringBuffer();
			for (Object e: (Object[]) o) sb.append((sb.length()==0 ? "" : " ") + toString(e) );
			return "[" + sb.toString() + "]";
		}
		return o.toString();
	}
	
	public static String toStringTokenImage(String s) {
		return Utility.toString(s.substring(1, s.length()-1));
	}
	
	public static TokenMgrError redoTokenMgrError(TokenMgrError e, String msg) {
		StackTraceElement ste[] = e.getStackTrace();
		e = new TokenMgrError(msg, e.errorCode);
		e.setStackTrace(ste);
		return e;
	}
	
	public static ParseException redoParseException(ParseException e, String msg) {
		StackTraceElement ste[] = e.getStackTrace();
		e = new ParseException(msg);
		e.setStackTrace(ste);
		return e;
	}
}

PARSER_END(Parser)

TOKEN_MGR_DECLS : {
  int MLCD;
}

SKIP:	// white spaces
{	"#|" { MLCD++; } : MLC | ";" : CMT | < (" " | "\t" | "\r" | "\n")+ >
//| "#;" { try { parser.Elt(); } catch (Throwable t) { }
}
<MLC> SKIP: { "|#" { SwitchTo( --MLCD == 0 ? DEFAULT : MLC ); } }
<MLC> MORE: { "#|" { MLCD++; } | "\"" : SMLC | ";" : CMLC | < ~[] > }
<SMLC> SKIP: { "\"" : MLC } 

<CMLC> SKIP: { < (("\r")? "\n") > : MLC }
<CMLC> MORE: { "\"" : SCMLC | < ~[] > }
<SCMLC> SKIP: { "\"" : CMLC } 

<CMT> SKIP: { "\"" : SCMT | < (("\r")? "\n") > : DEFAULT |  < ~[] > }
<SCMT> SKIP: { "\"" : CMT } 

<SMLC, SCMLC, SCMT> MORE: {	< "\\\"" | ~["\""] > }

TOKEN:	// separators
{	"(" | ")"
}

TOKEN:	// reserved words
{	< Null: "()" | "#null" >
|	< True: "#t" | "#true" >
|	< False: "#f" | "#false" >
|	< SheBang: "#!" >
|	< Inert: "#inert" >
|	< Ignore: "#_" | "#ignore" >
|	< Cmt: "#;" >
|	< Symbol1: "#s" ["#", "," , "'" , "`" , "\u00b4" , "\"" , "|"] >
|	< # hex: ["0"-"9", "a"-"f", "A"-"f"] >
|   < Char: "#\\" ( [ "\u0000" - "\uffff" ] | "x" <hex> ( <hex> ( <hex> ( <hex> )? )? )? ) >
}

TOKEN:	// literals
{	< BInteger: <Int> ( "bi" | "BI") >
|	< Long: <Int> ( "l" | "L" ) >
|	< Integer: <Int> >
|	< # Int: "0" | ("+"|"-")? <Nat> >
|	< # Nat: <d19> ( ("_")? <d09>)* >
|	< # d19: ["1"-"9"] >
|	< # d09: ["0"-"9"] >
|	< BDecimal: <Dec> ( "bd" | "BD" ) >
|	< Double: <Dec> ( "d" | "D" )?  >
|	< # Dec: (( "+" | "-" )? ("0" | <Nat>)) ( "." ( ("_")? <d09> )+ )? (<exp>)?  >
|	< # exp: ["e","E"] <Int> >
//|	< isoCtrl: ["\u0000"-"\u001f", "\u007f"-"\u009f"] >
//|	< String: "\"" ("\\" ["\\","\"","n","r","f","b","t"] | ~["\\","\"","\n","\r","\f","\b","\t"])* "\"" >
|	< String: "\"" ( "\\\\" | "\\\"" | ~["\"" /*, "\\"*/] )* "\"" >
|	< DSym:	"\\|" ( "\\\\" | "\\|" | ~["|" /*, "\\", "\u0000"-"\u001f", "\u007f"-"\u009f"*/] )+ "|" >
}

TOKEN:	// identifiers
{	< Prim: "&" ("boolean" | "byte" | "short" | "char" | "int" | "long" | "float" | "double") ("[]")* >
|	< Cls: "&" <jvid> ("." <jvid>)* ( ("[]")+ | ("$" <jvid> ("[]")* )+ )? >
|	< Dot: "." (<jvid>)+ >
|	< At: "@" (<jvid>)+ > 
|	< # jvid: ( <jvf> | "_" <jvn>) ( <jvn> )* >
|	< # jvf: "$" | <letter> >
|	< # jvn: "_" | <jvf> | <digit> >
|	< Mac: "'" | "`" | "," | ",@" | "\u00b4" >
|	< Kwd: ":" (<Sym>)+ >
|	< Sym: <first> ( "#" | "\"" | ";" | <Mac> | <first> )* >
|	< # first: <letter> | <special> | <digit> | <unicode> > 
|	< # special: "-" | "+" | "&" | "." | "@" | ":" | "!" | "=" | ">" | "<" | "%" | "?" | "/" | "*" | "$" | "_" | "~" | "^" | "\\" | "|" | "[]" >
|	< # letter: [ "A"-"Z", "a"-"z" ] >
|	< # digit: [ "0"-"9" ] >
|	< # unicode: [ "\u00a1" - "\u00b3" ] // latin1 supplement
			|	 [ "\u00b5" - "\u00ff" ] // latin1 supplement
			|	 [ "\u0370" - "\u03ff" ] // greek and coptic
			|	 [ "\u2026"            ] // general puntation: ellipsis 
			|	 [ "\u2070" - "\u209f" ] // superscripts and subscripts
			|	 [ "\u20a0" - "\u20bf" ] // currency
			|	 [ "\u2100" - "\u214f" ] // letterlike symbols
			|	 [ "\u2150" - "\u218f" ] // number forms
			|	 [ "\u2200" - "\u22ff" ] // mathematical operator 
	>
}

Object Elt() throws Exception: {
	Token t, t2=null;
	Object o, o2=null;
	List l = new ArrayList(); 
}	{	<Null>       { return null; }
	|	<True>       { return true; }    
	|	<False>      { return false; }    
	|	t=<Inert>    { return t.image; }    
	|	t=<Ignore>   { return t.image; }    
	|	t=<SheBang>  { return t.image; }    
	|	t=<Symbol1>  { return t.image.substring(2); }    
	|	t=<Char>     { return t.image.length() == 3 ? t.image.charAt(2) : (char) parseInt(t.image.substring(3),16); }    
	|	t=<BDecimal> { return new java.math.BigDecimal(t.image.substring(0,t.image.length()-2).replaceAll("_","")); }
	|	t=<Double>   { return java.lang.Double.parseDouble(t.image.replaceAll("_","")); }
	|	t=<BInteger> { return new java.math.BigInteger(t.image.substring(0,t.image.length()-2).replaceAll("_","")); }
	|	t=<Long>     { return java.lang.Long.parseLong(t.image.substring(0,t.image.length()-1).replaceAll("_","")); }
	|	t=<Integer>  { return java.lang.Integer.parseInt(t.image.replaceAll("_","")); }
	|	t=<String>   { return $(string, toStringTokenImage(t.image)); }
	|	t=<DSym>     { return t.image.substring(2,t.image.length()-1).replaceAll("\\\\\\|", "|").replaceAll("\\\\\\\\", "\\\\"); }
	|	t=<Prim>     { return classForName(t.image.substring(1)); }	
	|	t=<Cls>      { return classForName(t.image.substring(1)); }	
	|	t=<Dot>      { return $("%dot", $(string, t.image.substring(1))); }
	|	t=<At>       { return $("%at", $(string, t.image.substring(1))); } 
	|	t=<Mac> o=Elt() { return $("%"+t, o); }
	|	<Cmt> Elt()  { return "#inert"; }
	|	t=<Kwd>      { return t.image; }
	|	t=<Sym>      { return t.image; }  	
	//|	t=<Sym> ["::" t2=<Sym>] { return t2 == null ? t.image : $("%eval", $("%'", t2.image), t.image); }  	
	|	"(" ( o=Elt(){ l.add(o); } )+ ")" { return l.toArray(); }
	|	"[" ( o=Elt(){ l.add(o); } )+ "]" { return l.toArray(); }
}

Object[] parse() throws Exception: {
	Object o = null;
	List l = new ArrayList(); 
}
{	( o=Elt(){ l.add(o); } )* <EOF> { return l.toArray(); }
}

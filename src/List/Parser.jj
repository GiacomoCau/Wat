
options {
	JDK_VERSION = "1.8";
	static = false;
	debug_parser = false;
}


PARSER_BEGIN(Parser)

package List;

import static Wat.Utility.$;
import static Wat.Utility.classForName;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import Wat.Utility;

@SuppressWarnings("all")
public class Parser {
	
	/* static=true
	public static <T> T parse(String line) throws Exception {
		// E' necessario inizializzare jj_input_stream con un SimpleCharStream!
		if (jj_input_stream == null) jj_input_stream = new SimpleCharStream((Reader) null);
		ReInit(new StringReader(line));
		return (T) parse();
	}
	//*/
	
	// static=false
	public static Object[] parse(String rest) throws Exception {
		return new Parser(rest).parse();
	}
	
	public Parser(String line) {
		this(new StringReader(line));
	}
	
	public static void main(String args []) throws Exception {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		boolean expr = true;
		for (;;) {
			//System.out.print("> "); String line = in.readLine(); line += "\n";
			String line = Wat.Utility.read();
			if (line.equals("\n")) continue;
			var cmd = line.substring(0,line.length()-1);
			if (cmd.equals("!end"))
				break;
		  	else if (cmd.equals("!expr"))
		  		expr = true;
		  	else if (cmd.equals("!token"))
		  		expr = false;
			else try {
 				//line = Utility.toString(line);
				System.out.print(line);
				Parser parser = new Parser(line); // static=false
 				if (expr) {
					Object o = parser.parse();
					System.out.println("OK: " + toString(o));
				}
				else {
					for(;;) {
						Token token = parser.getNextToken();
						if (token.kind == 0) break;
						System.out.printf("%s:\t%s\n", ParserConstants.tokenImage[token.kind], token.image);
					}
				}
			}
			catch (Exception e) {
				System.out.println("NOK! " /*+ e.getMessage()*/);
				e.printStackTrace(System.out);
			}
			catch (Error e) {
				System.out.println("Oops! " /*+ e.getMessage()*/);
				e.printStackTrace(System.out);
			}
		}
		System.out.println("finito!");
	}
	
	public static String toString(Object o) {
		if (o == null) return "null";
		if (o instanceof String) return "\"" + Utility.toSource((String) o) + "\"";
		if (o instanceof Object[]) {  
			StringBuffer sb = new StringBuffer();
			for (Object e: (Object[]) o) sb.append((sb.length()==0 ? "" : " ") + toString(e) );
			return "[" + sb.toString() + "]";
		}
		return o.toString();
	}

	public boolean isNil(Object o) {
		return o instanceof Object[] && ((Object[]) o).length == 0;
		//return o instanceof Object[] arr && arr.length == 0; // ko!
	}
	
	public static String toStringTokenImage(String s) {
		return Utility.toString(s.substring(1, s.length()-1));
	}
	
	public static TokenMgrError redoTokenMgrError(TokenMgrError e, String msg) {
		StackTraceElement ste[] = e.getStackTrace();
		e = new TokenMgrError(msg, e.errorCode);
		e.setStackTrace(ste);
		return e;
	}
	
	public static ParseException redoParseException(ParseException e, String msg) {
		StackTraceElement ste[] = e.getStackTrace();
		e = new ParseException(msg);
		e.setStackTrace(ste);
		return e;
	}
}

PARSER_END(Parser)

TOKEN_MGR_DECLS : {
  int MLCD;
}

SKIP:	// white spaces
{	"#|" { MLCD++; } : MLC | ";" : CMT | < (" " | "\t" | "\r" | "\n")+ >
}
<MLC> SKIP: { "|#" { SwitchTo( --MLCD == 0 ? DEFAULT : MLC ); } }
<MLC> MORE: { "#|" { MLCD++; } | "\"" : SMLC | ";" : CMLC | < ~[] > }
<SMLC> SKIP: { "\"" : MLC } 

<CMLC> SKIP: { < (("\r")? "\n") > : MLC }
<CMLC> MORE: { "\"" : SCMLC | < ~[] > }
<SCMLC> SKIP: { "\"" : CMLC } 

<CMT> SKIP: { "\"" : SCMT | < (("\r")? "\n") > : DEFAULT |  < ~[] > }
<SCMT> SKIP: { "\"" : CMT } 

<SMLC, SCMLC, SCMT> MORE: {	< "\\\"" | ~["\""] > }

TOKEN:	// separators
{	"(" | ")"
}

TOKEN:	// reserved words
{	< Nil: "()" >
|	< True: "#t" >
|	< False: "#f" >
|	< SheBang: "#!" >
| 	< Null: "#null" >
|	< Inert: "#inert" >
|	< Ignore: "#ignore" | "#_" >
}

TOKEN:	// literals
{	< Long: < Integer > ( "l" | "L" ) >
| 	< Integer: "0" | <sNat> >
|	< # sNat: ("+"|"-")? <Nat> >
|	< # Nat: <d19> (<d09>)* >
|	< # d19: ["1"-"9"] >
|	< # d09: ["0"-"9"] >
|	< Double: ((("+"|"-")? "0" | <sNat>) ( "d" | "D" | "." (<d09>)+) (<exp>)?) >
|	< # exp: ["e","E"] <Integer> >
//|	< String: "\"" ("\\" ["\\","\"","n","r","f","b","t"] | ~["\\","\"","\n","\r","\f","\b","\t"])* "\"" >
|	< String: "\"" ( "\\\\" | "\\\"" | ~["\""] )* "\"" >
|	< USym:	"|" ( "\\\\" | "\\|" | ~["|"] )+ "|" >
}

TOKEN:	// identifiers
{ 	< Prim:   "&" ("boolean" | "byte" | "short" | "char" | "int" | "long" | "float" | "double") ("[]")* >
|  	< ClsId:  "&" <jvid> ("." <jvid>)* ( ("[]")+ | ("$" <jvid> ("[]")* )+ )? >
|   < Dot: "." (<jvid>)+ >
|   < At: "@" (<jvid>)+ > 
|	< # jvid: ( <jvf> | "_" <jvn>) ( <jvn> )* >
|	< # jvf: "$" | <letter> >
|   < # jvn: "_" | <jvf> | <digit> >
|   < Kwd: ":" (<Sym>)+ >
|	< Sym: <first> ( "#" | "'" | "|" | "," | "`" | <digit> | <first> )* >
|	< # first: <letter> | <special> > 
|	< # special: "." | "@" | "-" | "&" | "!" | "=" | ">" | "<" | "%" | "+" | "?" | "/" | "*" | "$" | "_" | "~" | "^" | ":" | "\\" | "||" >
|	< # letter: [ "A"-"Z", "a"-"z" ] >
|	< # digit: [ "0"-"9" ] >
}


Object Elt() throws Exception: {
	Token t, t2=null;
	Object o, o2=null;
  	List l = new ArrayList(); 
}	{	<Nil> 		 { return $(); }
	|	<Null>		 { return null; }
	|	<True> 		 { return true; }    
	|	<False> 	 { return false; }    
	|	t=<Inert>	 { return t.image; }    
	|	t=<SheBang>	 { return t.image; }    
	|	t=<Ignore> 	 { return t.image; }    
	|	t=<Double>	 { return java.lang.Double.parseDouble(t.image); }
	|	t=<Long>	 { return java.lang.Long.parseLong(t.image.substring(0,t.image.length()-1)); }
	|	t=<Integer>	 { return java.lang.Integer.parseInt(t.image); }
	|	t=<String>	 { return $("wat-string", toStringTokenImage(t.image)); }
	|	t=<USym>	 { return t.image.substring(1,t.image.length()-1).replaceAll("\\\\\\|", "|").replaceAll("\\\\\\\\", "\\\\"); }
	|	t=<Prim>	 { return classForName(t.image.substring(1)); }	
	|	t=<ClsId>	 { return classForName(t.image.substring(1)); }	
	|   t=<Dot>      { return $("%dot", $("wat-string", t.image.substring(1))); } 
	|   t=<At>		 { return $("%at", $("wat-string", t.image.substring(1))); } 
	|	t=<Kwd>      { return t.image; }
	|	t=<Sym>      { return t.image; }  	
	//|	t=<Sym> ["::" t2=<Sym>] {	return t2 == null ? t.image : $("%eval", $("%'", t2.image), t.image); }  	
	|	"'" o=Elt()  { return $("%'", o); }
	|	",@" o=Elt() { return $("%,@", o); }
	|	"," o=Elt()  { return $("%,", o); }
	|	"`"  o=Elt() { return $("%`", o); }
	|	"(" ( o=Elt(){ l.add(o); } )+ [ "." o2=Elt() ] ")" {
		if (o2 != null && !isNil(o2)) { l.add( "." ); l.add( o2 ); };
		return l.toArray();
	} 
}

Object[] parse() throws Exception: {
	Object o = null;
  	List l = new ArrayList(); 
}
{	( o=Elt(){ l.add(o); } )* <EOF> { return l.toArray(); }
}


;;; LispX Reader Tests

(defSuite read

  (defTest read.1
    (with-standard-input-from-string "foo" (read))
    'foo)

  (defTest read.1a
    (with-standard-input-from-string "foo" (read (dget *standard-input*)))
    'foo)

  (defTest read.2
    (signalsError?
     (with-standard-input-from-string "(foo" (read))
    end-of-file))

  (defTest read.2a
    (signalsError?
     (with-standard-input-from-string "(foo" (read (dget *standard-input*)))
    end-of-file))

  ;; Incomplete objects always cause `end-of-file', even if EOF-ERROR-P is false.
  (defTest read.2b
    (signalsError?
     (with-standard-input-from-string "(foo" (read (dget *standard-input*) #f))
     end-of-file))

  (defTest read.2c1
    (signalsError?
     (with-standard-input-from-string "" (read))
     end-of-file))

  (defTest read.2c2
    (signalsError?
     (with-standard-input-from-string "" (read (dget *standard-input*)))
     end-of-file))

  (defTest read.2d
    (with-standard-input-from-string "" (read (dget *standard-input*) #f))
    #inert)

  (defTest read.2e
    (with-standard-input-from-string "" (read (dget *standard-input*) #f 44))
    44)

  (defTest read.3a
    (signalsError?
     (with-standard-input-from-string "" (read 'not-a-stream))
     unboundMethodError :class Symbol :methodName 'stream-read))

  (defTest read.3b
    (signalsError?
     (with-standard-input-from-string "" (read (dget *standard-input*) 12))
     type-error :datum 12 :expected 'Boolean))

  (defTest read.4
    (with-standard-input-from-string "1 2 3"
      (assert#t (eq? 1 (read)))
      (assert#t (eq? 2 (read)))
      (assert#t (eq? 3 (read)))
      (assert#t (eq? 4 (read (dget *standard-input*) #f 4)))
      #t)))

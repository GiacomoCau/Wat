;;; Test Utilities

;; Import Mocha test framework functions from the global scope.
(def mocha:describe (to-lisp-function (js-global "describe")))
(def mocha:it (to-lisp-function (js-global "it")))
(def mocha:before (to-lisp-function (js-global "before")))
(def mocha:before-each (to-lisp-function (js-global "beforeEach")))
(def mocha:after (to-lisp-function (js-global "after")))
(def mocha:after-each (to-lisp-function (js-global "afterEach")))

(defVau deftest (name expression . expected?) env
  "Run the EXPRESSION as a test identified by NAME and compare its
  |result to an EXPECTED value (which defaults to true).  Tests may
  |capture a continuation to the default prompt."
  (mocha:it
   (to-js-string (symbolName name))
   (js-\ ()
     ;; Push the default prompt for asynchronous tests.
     ;;
     ;; Note that this is quite subtle: when an asynchronous test
     ;; captures to this prompt, it returns a promise here.  This
     ;; promise is returned to Mocha, which does the right thing (wait
     ;; for it to resolve).
     (pushPrompt coroutinePrompt
       ;; Test and expected expressions are evaluated in fresh child
       ;; environments of the current environment, so that bindings
       ;; they create don't affect other tests.
       (assert (eq? (eval expression (newEnv env))
                  (eval (opt? expected? #t) (newEnv env))))))))

(defMacro deftest* (name . forms)
  "Run the FORMS as a test identified by NAME, but unlike `deftest',
  |simply ignore their result.  The test only fails when the forms signal
  |an error.  Use this instead of `deftest' if you just want to run some
  |forms, and don't need to compare their result to an expected value."
  (list deftest name (list* prog1 #t forms)))

(defVau defsuite (name . forms) env
  "Evaluate FORMS as a group of tests identified by NAME.  The forms
  |must not capure any continuations."
  (mocha:describe
   (to-js-string (symbolName name))
   (js-\ ()
     ;; We don't push a prompt here.  The reason is that Mocha
     ;; describe() doesn't support promises anyway.  So any Lisp code
     ;; that tries to capture a continuation directly inside a suite
     ;; will get a "prompt not found" error (due to the barrier inside
     ;; `js-\').
     (eval (list* begin forms) env))))

(def\ lispx::make-mocha-hook (mocha-hook-fun)
  "Metaprogramming utility to create Mocha hooks.  Hooks may capture."
  (vau forms env
    (mocha-hook-fun
     (js-\ ()
       (pushPrompt 'defaultPrompt
         (eval (list* begin forms) env))))))

(def before (lispx::make-mocha-hook mocha:before))
(def before-each (lispx::make-mocha-hook mocha:before-each))
(def after (lispx::make-mocha-hook mocha:after))
(def after-each (lispx::make-mocha-hook mocha:after-each))

(defVau signalsError (form conditionClass . slotSpecs) env
  "Evaluate the FORM and assert that it signals a condition of the
  |given CONDITION-CLASS.  Expected slots of the condition can be
  |specified by SLOT-SPECS (a plist) and will be compared against the
  |slots of the signalled condition."
  (let ((class (findClass conditionClass env)))
    (block exit
      (handlerCase ((Obj (\ (c)
                               (if (type? c class)
                                   (begin
                                     (letLoop -check-slots- ((slotSpecs slotSpecs))
                                       (when (not (null? slotSpecs))
                                         (let (((name value . rest-slotSpecs) slotSpecs))
                                           (unless (eq? (getSlot c name) (eval value env))
                                             (returnFrom exit #f))
                                           (-check-slots- rest-slotSpecs))))
                                     (returnFrom exit #t))
                                   (returnFrom exit #f)))))
        (eval form env))
      #f)))

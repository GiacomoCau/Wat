;;; Class Hierarchy Integrity Test

(defSuite class-hierarchy

  (def\ test-hierarchy (classes)
    (let ((env (theEnv)))
      (letLoop -test-classes- ((classes classes) (superclass Object))
        (doList (c classes #t)
          (etypecase c
            (Symbol
             (let ((class (findClass c env)))
               (assert#t (subClass? class superclass))))
            (Cons
             (let ((class (findClass (car c) env)))
               (assert#t (subClass? class superclass))
               (-test-classes- (cdr c) class))))))))

  (defTest test-hierarchy
    (test-hierarchy
     '(string
       symbol
       number
       boolean
       (list cons
             nil)
       void
       ignore
       environment
       (class built-in-class
              standard-class)
       (operator built-in-operator
                 fexpr
                 function)
       (input-stream string-input-stream)
       (output-stream string-output-stream
                      js-console-output-stream)
       (standard-object dget
                        (condition (error type-error
                                          unbound-symbol-error
                                          unbound-slot-error
                                          unbound-method-error
                                          assertion-error
                                          match-error
                                          (stream-error end-of-file)
                                          reader-error
                                          prompt-not-found-error
                                          restart-error
                                          simpleError))
                        handlerFrame
                        restartHandler
                        condition-handler)
       continuation)))

  (defTest test-hierarchy.sanity-check
    (signalsError?
     (test-hierarchy
      '((number
         boolean)))
     assertion-error)))

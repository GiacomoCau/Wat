;;; LispX Main Test Suite

;; The order of the tests is haphazard.  It should be brought in line
;; with how the operators appear in boot.lispx.

(defsuite signals-error

  (deftest |SIGNALS-ERROR returns true if the expression signals.|
    (signals-error
     x
     UnboundSymbolError))

  (deftest |SIGNALS-ERROR returns true if the expression signals a subclass.|
    (signals-error
     x
     Error))

  (deftest |SIGNALS-ERROR returns true if the expression signals and slots match.|
    (signals-error
     x
     UnboundSymbolError :symbol 'x))

  (deftest |SIGNALS-ERROR returns true if the expression signals a subclass and slots match.|
    (signals-error
     x
     Error :symbol 'x))

  (deftest |SIGNALS-ERROR returns false if the expression signals but slots don't match.|
    (signals-error
     x
     UnboundSymbolError :symbol 'y)
    #f)

  (deftest |SIGNALS-ERROR returns false if the expression doesn't signal.|
    (signals-error
     1
     Error)
    #f)

  (deftest |SIGNALS-ERROR returns false if the expression signals another condition type.|
    (signals-error
     x
     Error :type 'match)
    #f))

(defsuite assert

  (deftest assert.1
    (assert (= 1 1))
    #inert)

  (deftest assert.2
    (signals-error
     (assert (= 1 2))
     AssertionError))

  (deftest assert.3
    (signals-error
     (assert)
     MatchError))

  (deftest assert.4
    (signals-error
     (assert 1)
     TypeError :datum 1 :expected-type 'Boolean))

  (deftest assert.5
    (signals-error
     (assert #t #t)
     MatchError)))

(defsuite error

  (deftest error.1
    (signals-error
     (error (make-instance StandardObject :x 1 :y 2))
     StandardObject :x 1 :y 2))

  (deftest error.2
    (signals-error
     (error)
     MatchError))

  (deftest error.3
    (handler-bind ((SimpleError (lambda (e)
                                   (invoke-restart 'continue 12))))
      (error (make-simple-error "Foo!")
        (abort (lambda (value) (* value 10)))
        (continue (lambda (value) (* value 2)))))
    24)

  (deftest error.3b
    (handler-bind ((SimpleError (lambda (e)
                                   (invoke-restart 'abort 12))))
      (error (make-simple-error "Foo!")
        (abort (lambda (value) (* value 10)))
        (continue (lambda (value) (* value 2)))))
    120)

  (deftest error.4
    (restart-case ((abort (lambda (value) (* 1000 value))))
      (handler-bind ((SimpleError (lambda (e)
                                     (invoke-restart 'abort 12))))
        (error (error (make-simple-error "Foo!"))
          (abort (lambda (value) (* value 10)))
          (continue (lambda (value) (* value 2))))))
    12000)

  (deftest error.4b
    (block b
      (restart-case ((abort (lambda (value) (* 1000 value))))
        (handler-bind ((SimpleError (lambda (e)
                                       (invoke-restart 'abort 12))))
          (error (error (make-simple-error "Foo!")
                   (abort (lambda (value) (return-from b (* 10000 value)))))
            (abort (lambda (value) (* value 10)))
            (continue (lambda (value) (* value 2)))))))
    120000))

(defsuite assert-type

  (deftest assert-type.1
    (assert-type #t Boolean))

  (deftest assert-type.2
    (signals-error
     (assert-type #t String)
    TypeError :datum #t :expected-type 'String))

  (deftest assert-type.3
    (signals-error
     (assert-type #t #f)
     TypeError :datum #f :expected-type 'Class))

  (deftest assert-type.4
    (signals-error
     (assert-type)
     MatchError))

  (deftest assert-type.5
    (signals-error
     (assert-type #t)
     MatchError)))

(defsuite the

  (deftest the.1
    (the Boolean (= 1 1))
    #t)

  (deftest the.2
    (signals-error
     (the String #t)
     TypeError :datum #t :expected-type 'String))

  (deftest the.3
    (signals-error
     (the #t #f)
     TypeError :datum #t :expected-type 'Intern))

  (deftest the.4
    (signals-error
     (the)
     MatchError))

  (deftest the.5
    (signals-error
     (the #t)
     MatchError)))

(defsuite make-type-error

  (deftest make-type-error.1
    (let ((e (make-type-error "foo" 'Number)))
      (assert (typep e TypeError))
      (assert (typep e Error))
      (assert (typep e Condition))
      (assert (= "foo" (slot-value e 'datum)))
      (assert (= 'Number (slot-value e 'expected-type))))
    #inert))

(defsuite simple-error

  (deftest make-simple-error.1
    (let ((e (make-simple-error "foo")))
      (assert (typep e SimpleError))
      (assert (typep e Error))
      (assert (typep e Condition))
      (assert (= "foo" (slot-value e 'message))))
    #inert)

  (deftest simple-error.1
    (signals-error
     (simple-error)
     MatchError))

  (deftest simple-error.2
    (signals-error
     (simple-error "foo")
     SimpleError :message "foo")))

(defsuite make-restart-error

  (deftest make-restart-error.1
    (let ((e (make-restart-error 'continue)))
      (assert (typep e RestartError))
      (assert (typep e Error))
      (assert (typep e Condition))
      (assert (= 'continue (slot-value e 'restart-name))))
    #inert))

(defsuite vau

  (deftest |A fexpr without body expression results in #VOID.|
    ((vau #ignore #ignore))
    #inert)

  (deftest |A fexpr returns its operands unevaluated.|
    ((vau ops #ignore ops) x y z)
    '(x y z))

  (deftest |A fexpr can have multiple body expressions.|
    (progn
      (def env (the-environment))
      (assert (= ((vau ops #ignore (set env var 1) ops) x y z)
                 '(x y z)))
      (assert (= (eval 'var env) 1)))
    #inert)

  (deftest |The environment parameter receives the current environment.|
    (progn
      (def env (the-environment))
      (eq ((vau #ignore e e)) env)))

  (deftest |Fexprs are instances of FEXPR, OPERATOR, OBJECT.|
    (let ((fexpr (vau #ignore #ignore 12)))
      (typep fexpr Fexpr)
      (typep fexpr Operator)
      (typep fexpr Object)
      (fexpr))
    12)

  (deftest |Arity check 1.|
    (signals-error
     (vau)
     MatchError))

  (deftest |Arity check 2.|
    (signals-error
     (vau x)
     MatchError)))

(defsuite quote

  (deftest |Quoted symbols are pointer identical.|
    (and
     (eq 'foo 'foo)
     (eq 'foo 'foo)
     (eq 'foo (function-symbol 'foo))
     (eq 'Foo 'Foo)
     (eq 'Foo (class-symbol 'Foo))))

  (deftest |Ordinary symbols can be quoted.|
    (eq 'foo (variable-symbol 'foo)))

  (deftest |Function symbols can be quoted.|
    (eq 'foo (function-symbol 'foo)))

  (deftest |Class symbols can be quoted.|
    (eq 'Foo (class-symbol 'Foo)))

  (deftest |Lists can be quoted.|
    (= '(1 2 3) (list 1 2 3)))

  (deftest |Numbers can be quoted.|
    (= '1 1))

  (deftest |Strings can be quoted.|
    (= '"foo" "foo"))

  (deftest |QUOTE requires at least one argument.|
    (signals-error
     (quote)
     MatchError))

  (deftest |QUOTE requires at most one argument.|
    (signals-error
     (quote 1 2 3)
     MatchError)))

(defsuite list

  (deftest list.1
    (eq #null (list)))

  (deftest list.2
    (= '(1) (list 1)))

  (deftest list.3
    (= '((1) (2)) (list (list 1) (list 2)))))

(defsuite list*

  (deftest list*.1
    (list*)
    #null)

  (deftest list*.2
    (list* 1 2 '(3))
    '(1 2 3))

  (deftest list*.3
    (list* 1 2 3)
    '(1 2 . 3))

  (deftest list*.4
    (list* 1 2)
    '(1 . 2))

  (deftest list*.5
    (list* 2)
    '2))

(defsuite the-environment

  (deftest the-environment.1
    (let ((x 1))
      (eval 'x (the-environment)))
    1)

  (deftest the-environment.2
    (let ((x 1)
          (env (the-environment)))
      (boundp 'x env))
    #f)

  (deftest the-environment.3
    (let* ((x 1)
           (env (the-environment)))
      (boundp 'x env))
    #t)

  (deftest the-environment.4
    (signals-error
     (the-environment #t)
     MatchError)))

(defsuite boundp

  (deftest boundp.1
    (boundp 'nope (the-environment))
    #f)

  (deftest boundp.2
    (boundp 'defun (the-environment)))

  (deftest boundp.3
    (boundp 'StandardObject (the-environment)))

  (deftest boundp.4
    (signals-error
     (boundp)
     MatchError))

  (deftest boundp.5
    (signals-error
     (boundp 'x)
     MatchError))

  (deftest boundp.6
    (signals-error
     (boundp 12 (the-environment))
     TypeError :datum 12 :expected-type 'Symbol))

  (deftest boundp.7
    (signals-error
     (boundp 'x 33)
     TypeError :datum 33 :expected-type 'Env))

  (deftest boundp.8
    (signals-error
     (boundp 12 (the-environment) #t)
     MatchError)))

(defsuite macro

  (deftest macro.0
    ((macro ()))
    #inert)

  (deftest macro.1
    (let ((z 1))
      ((macro () 'x 'y 'z)))
    1)

  (deftest macro.2
    ((macro () (list = 1 1)))
    #t)

  (deftest macro.3
    (signals-error
     (macro)
     MatchError)
    #t))

(defsuite defmacro

  (deftest defmacro.1
    (progn
      (defmacro myprogn body
        (list* progn body))
      (myprogn 1 2 3))
    3)

  (deftest defmacro.2
    (signals-error
     (defmacro)
     MatchError))

  (deftest defmacro.3
    (signals-error
     (defmacro foo)
     MatchError))

  (deftest defmacro.4
    (progn
      (defmacro foo ())
      (foo))
    #inert))

(defsuite defexpr

  (deftest defexpr.1
    (progn
      (defexpr myprogn body env
        (eval (list* progn body) env))
      (myprogn 1 2 3))
    3)

  (deftest defexpr.2
    (signals-error
     (defexpr)
     MatchError))

  (deftest defexpr.3
    (signals-error
     (defexpr foo)
     MatchError))

  (deftest defexpr.3b
    (signals-error
     (defexpr foo ())
     MatchError))

  (deftest defexpr.4
    (progn
      (defexpr foo () #ignore)
      (foo))
    #inert))

(defsuite def

  (deftest def.1
    (progn
      (def (x y z) (list 1 2 3))
      (assert (= x 1))
      (assert (= y 2))
      (assert (= z 3)))
    #inert)

  (deftest def.2
    (signals-error
     (def :key :key)
     TypeError :datum :key :expected-type '(or Symbol Cons)))

  (deftest def.2b
    (signals-error
     (def :key :key2)
     TypeError :datum :key :expected-type '(or Symbol Cons)))

  (deftest def.3
    (signals-error
      (def #ignore 2)
    TypeError :datum #ignore :expected-type '(or Symbol Cons)))

  (deftest def.4
    (def x 1)
    1)

  (deftest def.5
    (signals-error
      (def () ())
    TypeError :datum #null :expected-type '(or Symbol Cons)))

  (deftest def.6
    (signals-error
     (def)
     MatchError))

  (deftest def.7
    (signals-error
     (def x)
     MatchError))

  (deftest def.8
    (signals-error
     (def #t 12)
     TypeError :datum #t :expected-type '(or Symbol Cons)))

  (deftest def.9
    (def x 1 "docstring")
    1))

(defsuite defconstant

  (deftest defconstant.1
    (progn
      (defconstant x 1)
      x)
    1)

  (deftest defconstant.2
    (signals-error
     (defconstant)
     MatchError))

  (deftest defconstant.3
    (signals-error
     (defconstant x)
     MatchError))

  (deftest defconstant.4
    (progn
      (defconstant x 1)
      x)
    1)

  (deftest defconstant.5
    (defconstant x 1)
    1))

(defsuite lambda

  (deftest lambda.1
    ((lambda ()))
    #inert)

  (deftest lambda.2
    ((lambda args 'whatever args) 1 2 (intern "foo"))
    '(1 2 foo))

  (deftest lambda.3
    (signals-error
     (lambda)
     MatchError))

  (deftest lambda.4
    (signals-error
     (lambda #t)
     TypeError :datum #t :expected-type '(or Null Ignore Symbol Cons))))

(defsuite defun

  (deftest defun.1
    (progn
      (defun foo () 'foo)
      (defun bar (x) (list (foo) x))
      (bar 'bar))
    '(foo bar))

  (deftest defun.2
    (progn
      (defun nope ())
      (nope))
    #inert)

  (deftest defun.3
    (signals-error
     (defun)
     MatchError))

  (deftest defun.4
    (signals-error
     (defun foo)
     MatchError))

  (deftest defun.5
    (signals-error
     (defun #t ())
     TypeError :datum #t :expected-type '(or Symbol Cons)))

  (deftest defun.6
    (typep (defun foo ()) Function)))

(defsuite progn

  (deftest progn.1
    (progn)
    #inert)

  (deftest progn.2
    (progn (list))
    (list))

  (deftest progn.3
    (progn
      (def env (the-environment))
      (progn (set env x 1) (set env x 2) x))
    2))

(defsuite prog1

  (deftest prog1.1
    (prog1 1)
    1)

  (deftest prog1.2
    (prog1 1 2 3)
    1)

  (deftest prog1.3
    (signals-error
     (prog1)
     MatchError))

  (deftest prog1.4
    (progn
      (def env (the-environment))
      (assert (= 4 (prog1 4 (set env x 2))))
      x)
    2))

(defsuite eval

  (deftest eval.1
    (eval #null (the-environment))
    #null)

  (deftest eval.2
    (eval '(= 1 2) (the-environment))
    #f)

  (deftest eval.3
    (signals-error
     (eval)
     MatchError))

  (deftest eval.4
    (signals-error
     (eval '1)
     MatchError))

  (deftest eval.5
    (signals-error
     (eval 'x (the-environment))
     UnboundSymbolError
     :symbol 'x))

  (deftest eval.6
    (signals-error
     (eval '1 (the-environment) #t)
     MatchError)))

(defsuite cons

  (deftest cons.1
    (cons (list 1) (list 2))
    '((1) . (2)))

  (deftest cons.2
    (cons (list 1) #null)
    '((1)))

  (deftest cons.3
    (signals-error
     (cons)
     MatchError))

  (deftest cons.4
    (signals-error
     (cons 1)
     MatchError))

  (deftest cons.5
    (signals-error
     (cons 1 2 3)
     MatchError)))

(defsuite car

  (deftest car.1
    (car (list 1 2))
    1)

  (deftest car.2
    (signals-error
     (car)
     MatchError))

  (deftest car.3
    (signals-error
     (car 1)
     TypeError :datum 1 :expected-type 'Cons))

  (deftest car.4
    (signals-error
     (car 1 2)
     MatchError)))

(defsuite cdr

  (deftest cdr.1
    (cdr (list 1 2))
    '(2))

  (deftest cdr.2
    (signals-error
     (cdr)
     MatchError))

  (deftest cdr.3
    (signals-error
     (cdr 1)
     TypeError :datum 1 :expected-type 'Cons))

  (deftest car.4
    (signals-error
     (cdr 1 2)
     MatchError)))

(defsuite symbol-name

  (deftest symbol-name.1
    (= "foo" (symbol-name 'foo)))

  (deftest symbol-name.2
    (= "foo" (symbol-name 'foo)))

  (deftest symbol-name.3
    (= "foo" (symbol-name (class-symbol 'foo))))

  (deftest symbol-name.4
    (= "foo" (symbol-name :foo)))

  (deftest symbol-name.5
    (signals-error
     (symbol-name)
     MatchError))

  (deftest symbol-name.6
    (signals-error
     (symbol-name 12)
     TypeError :datum 12 :expected-type 'Intern)))

(defsuite variable-symbol

  (deftest variable-symbol.1
    (variable-symbol 'foo)
    'foo)

  (deftest variable-symbol.2
    (variable-symbol :foo)
    'foo)

  (deftest variable-symbol.4
    (variable-symbol (class-symbol 'foo))
    'foo)

  (deftest variable-symbol.5
    (signals-error
     (variable-symbol)
     MatchError))

  (deftest variable-symbol.6
    (signals-error
     (variable-symbol 5)
     TypeError :datum 5 :expected-type 'Intern)))

(defsuite function-symbol

  (deftest function-symbol.1
    (function-symbol 'foo)
    'foo)

  (deftest function-symbol.2
    (function-symbol :foo)
    'foo)

  (deftest function-symbol.4
    (function-symbol (class-symbol 'foo))
    'foo)

  (deftest function-symbol.5
    (signals-error
     (function-symbol)
     MatchError))

  (deftest function-symbol.6
    (signals-error
     (function-symbol 5)
     TypeError :datum 5 :expected-type 'Intern)))

(defsuite class-symbol

  (deftest class-symbol.1
    (class-symbol 'foo)
    (class-symbol 'foo))

  (deftest class-symbol.2
    (class-symbol :foo)
    (class-symbol 'foo))

  (deftest class-symbol.3
    (class-symbol 'Foo)
    (class-symbol 'Foo))

  (deftest class-symbol.5
    (signals-error
     (class-symbol)
     MatchError))

  (deftest class-symbol.6
    (signals-error
     (class-symbol 5)
     TypeError :datum 5 :expected-type 'Intern)))

(defsuite keyword-symbol

  (deftest keyword-symbol.1
    (keyword-symbol 'foo)
    :foo)

  (deftest keyword-symbol.2
    (keyword-symbol 'foo)
    :foo)

  (deftest keyword-symbol.3
    (keyword-symbol (class-symbol 'foo))
    :foo)

  (deftest keyword-symbol.5
    (signals-error
     (keyword-symbol)
     MatchError))

  (deftest keyword-symbol.6
    (signals-error
     (keyword-symbol 5)
     TypeError :datum 5 :expected-type 'Intern)))

(defsuite wrap

  (deftest wrap.1
    ((wrap (vau (x) #ignore x)) (list 1 2 3))
    '(1 2 3))

  (deftest wrap.2
    (signals-error
     (wrap)
     MatchError))

  (deftest wrap.3
    (signals-error
     (wrap 33)
     TypeError :datum 33 :expected-type 'Combinable)))

(defsuite unwrap

  (deftest unwrap.1
    ((unwrap (lambda (x) x)) (list 1 2 3))
    '(list 1 2 3))

  (deftest unwrap.2
    (signals-error
     (unwrap)
     MatchError))

  (deftest unwrap.3
    (signals-error
     (unwrap 33)
     TypeError :datum 33 :expected-type 'Apv)))

(defsuite if

  (deftest if.1
    (if #t (= 1 1) (= 1 2))
    #t)

  (deftest if.2
    (if #f (= 1 1) (= 1 2))
    #f)

  (deftest if.3
    (signals-error
     (if)
     MatchError))

  (deftest if.4
    (signals-error
     (if #t)
     MatchError))

  (deftest if.5
    (signals-error
     (if #t #f)
     MatchError))

  (deftest if.6
    (signals-error
     (if 1 #f #t)
     TypeError :datum 1 :expected-type 'Boolean)))

(defsuite cond

  (deftest cond.1
    (cond)
    #inert)

  (deftest cond.2
    (cond (#f 1 2 3))
    #inert)

  (deftest cond.3
    (cond (#f 1 2 3)
          ((= 1 1) 4 5 (= 1 1)))
    #t)

  (deftest cond.4
    (signals-error
     (cond (1 #t))
     TypeError :datum 1 :expected-type 'Boolean)))

(defsuite typecase

  (deftest typecase.1
    (signals-error
     (typecase)
     MatchError))

  (deftest typecase.2
    (typecase (+ 2 2))
    #inert)

  (deftest typecase.3
    (typecase (+ 2 2)
      (Object 1)
      (Integer 2))
    1)

  (deftest typecase.4
    (typecase (+ 2 2)
      (Integer 2)
      (Object 1))
    2))

(defsuite etypecase

  (deftest etypecase.1
    (signals-error
     (etypecase)
     MatchError))

  (deftest etypecase.2
    (signals-error
     (etypecase (+ 2 2))
     TypeError :datum 4))

  (deftest etypecase.3
    (etypecase (+ 2 2)
      (Object 1)
      (Integer 2))
    1)

  (deftest etypecase.4
    (etypecase (+ 2 2)
      (Integer 2)
      (Object 1))
    2)

  (deftest etypecase.5
    (signals-error
     (etypecase (+ 2 2)
       (String 2)
       (Boolean 1))
     TypeError :datum 4)))

(defsuite not

  (deftest not.1
    (not #t)
    #f)

  (deftest not.2
    (not #f)
    #t)

  (deftest not.3
    (signals-error
     (not)
     MatchError))

  (deftest not.4
    (signals-error
     (not 1)
     TypeError :datum 1 :expected-type 'Boolean)))

(defsuite eq

  (deftest eq.1
    (eq 'foo 'foo)
    #t)

  (deftest eq.2
    (eq 'foo 'bar)
    #f)

  (deftest eq.3
    (eq #t #t)
    #t)

  (deftest eq.4
    (eq #f #f)
    #t)

  (deftest eq.5
    (eq #inert #inert)
    #t)

  (deftest eq.6
    (eq #ignore #ignore)
    #t)

  (deftest eq.7
    (eq #null #null)
    #t)

  (deftest eq.8
    (eq #null ())
    #t)

  (deftest eq.9
    (eq #null '())
    #t)

  (deftest eq.10
    (signals-error
     (eq)
     MatchError))

  (deftest eq.11
    (signals-error
     (eq 11)
     MatchError)))

(defsuite =

  (deftest =.1
    (= 1 1 1)
    #t)

  (deftest =.2
    (= 1 1 2)
    #f)

  (deftest =.3
    (= #t #t #t)
    #t)

  (deftest =.4
    (= #t #t #f)
    #f)

  (deftest =.5
    (= "foo" "foo" "foo")
    #t)

  (deftest =.6
    (= (list (list 1)) (list (list 1)))
    #t)

  (deftest =.7
    (signals-error
     (=)
     MatchError))

  (deftest =.8
    (signals-error
     (= 1)
     MatchError)))

(defsuite /=

  (deftest /=.1
    (/= 1 1 1)
    #f)

  (deftest /=.2
    (/= 1 1 2)
    #f)

  (deftest /=.3
    (/= 1 2 3)
    #t)

  (deftest /=.4
    (/= #t #t #f)
    #f)

  (deftest /=.4b
    (/= #t #f)
    #t)

  (deftest /=.5
    (/= "foo" "foo" "foo")
    #f)

  (deftest /=.5b
    (/= "foo" "bar" "quux")
    #t)

  (deftest /=.6
    (/= (list (list 1)) (list (list 2)))
    #t)

  (deftest /=.7
    (signals-error
     (/=)
     MatchError))

  (deftest /=.8
    (/= 1)
    #t)

  (deftest /=.9
    (/= 1 2 3 3)
    #f)

  (deftest /=.9b
    (/= 3 1 2 3)
    #f)

  (deftest /=.9c
    (/= 3 1 2 3 4)
    #f)

  (deftest /=.9d
    (/= 1 2 3 3 4)
    #f)

  (deftest /=.9e
    (/= 3 3 4)
    #f)

  (deftest /=.10
    (/= #t "a")
    #t))

(defsuite <

  (deftest <.1
    (< 1 1 1)
    #f)

  (deftest <.2
    (< 1 1 2)
    #f)

  (deftest <.3
    (< -3 -2 -1 0 1 2 3)
    #t)

  (deftest <.4
    (signals-error
     (< #t #t #f)
     Error))

  (deftest <.5
    (signals-error
     (< "foo" "foo" "foo")
     Error))

  (deftest <.6
    (signals-error
     (< (list (list 1)) (list (list 2)))
     Error))

  (deftest <.7
    (signals-error
     (<)
     MatchError))

  (deftest <.8
    (signals-error
     (< 1)
     MatchError))

  (deftest <.9
    (< 1 2 3 3)
    #f)

  (deftest <.different-types
    (signals-error
     (< 1 2 3 "foo")
     TypeError :datum "foo" :expected-type 'Number)))

(defsuite >

  (deftest >.1
    (> 1 1 1)
    #f)

  (deftest >.2
    (> 2 1 1)
    #f)

  (deftest >.3
    (> 3 2 1 0 -1 -2 -3)
    #t)

  (deftest >.4
    (signals-error
     (> #t #t #f)
     Error))

  (deftest >.5
    (signals-error
     (> "foo" "foo" "foo")
     Error))

  (deftest >.6
    (signals-error
     (> (list (list 1)) (list (list 2)))
     Error))

  (deftest >.7
    (signals-error
     (>)
     MatchError))

  (deftest >.8
    (signals-error
     (> 1)
     MatchError))

  (deftest >.9
    (> 3 2 1 1)
    #f)

  (deftest >.different-types
    (signals-error
     (> 3 2 1 "foo")
     TypeError :datum "foo" :expected-type 'Number)))

(defsuite <=

  (deftest <=.1
    (<= 1 1 1)
    #t)

  (deftest <=.2
    (<= 1 1 2)
    #t)

  (deftest <=.3
    (<= -3 -2 -1 0 1 2 3)
    #t)

  (deftest <=.4
    (signals-error
     (<= #t #t #f)
     Error))

  (deftest <=.5
    (signals-error
     (<= "foo" "foo" "foo")
     Error))

  (deftest <=.6
    (signals-error
     (<= (list (list 1)) (list (list 2)))
     Error))

  (deftest <=.7
    (signals-error
     (<=)
     MatchError))

  (deftest <=.8
    (signals-error
     (<= 1)
     MatchError))

  (deftest <=.9
    (<= 1 2 3 3)
    #t)

  (deftest <=.10
    (<= 1 2 3 3 -1)
    #f)

  (deftest <=.different-types
    (signals-error
     (<= 1 1 3 "foo")
     TypeError :datum "foo" :expected-type 'Number)))

(defsuite >=

  (deftest >=.1
    (>= 1 1 1)
    #t)

  (deftest >=.2
    (>= 2 1 1)
    #t)

  (deftest >=.3
    (>= 3 2 1 1 0 0 -1 -2 -3 -3)
    #t)

  (deftest >=.4
    (signals-error
     (>= #t #t #f)
    Error))

  (deftest >=.5
    (signals-error
     (>= "foo" "foo" "foo")
     Error))

  (deftest >=.6
    (signals-error
     (>= (list (list 1)) (list (list 2)))
     Error))

  (deftest >=.7
    (signals-error
     (>=)
     MatchError))

  (deftest >=.8
    (signals-error
     (>= 1)
     MatchError))

  (deftest >=.9
    (>= 3 3 2 1)
    #t)

  (deftest >=.10
    (>= 3 3 2 100)
    #f)

  (deftest >=.different-types
    (signals-error
     (>= 3 3 2 "foo")
     TypeError :datum "foo" :expected-type 'Number)))

(defsuite +

  (deftest +.1
    (+)
    0)

  (deftest +.2
    (+ 10)
    10)

  (deftest +.3
    (+ 10 10 10)
    30))

(defsuite -

  (deftest -.1
    (signals-error
     (-)
     MatchError))

  (deftest -.2
    (- 1)
    -1)

  (deftest -.3
    (- -1)
    1)

  (deftest -.4
    (- 100 10 1)
    89))

(defsuite *

  (deftest *.1
    (*)
    1)

  (deftest *.2
    (* 10)
    10)

  (deftest *.3
    (* 10 -10 10)
    -1000))

(defsuite /

  (deftest /.1
    (signals-error
     (/)
     MatchError))

  (deftest /.2
    (/ 10d)
    0.1)

  (deftest /.3
    (/ 100 10 2)
    5)

  (deftest /.4
    (/ -100 10 2)
    -5))

(defsuite typep

  (deftest typep.1
    (and
     (typep #t Boolean)
     (typep #f Boolean)
     (typep 12 Integer)
     (typep "foo" String)
     (typep #null Null)
     (typep Object Class)))

  (deftest typep.2
    (and
     (typep Condition StandardClass)
     (typep Condition Class)
     (typep Condition Object)))

  (deftest typep.3
    (signals-error
     (typep)
     MatchError))

  (deftest typep.3
    (signals-error
     (typep "foo")
     MatchError)))

(defsuite intern

  (deftest intern.1
    (eq 'foo (intern "foo")))

  (deftest intern.2
    (signals-error
     (intern 12)
     TypeError :datum 12 :expected-type 'String))

  (deftest intern.3
    (signals-error
     (intern)
     MatchError)))

(defsuite apply

  (deftest apply.1
    (apply list ())
    '())

  (deftest apply.2
    (apply list '(1))
    '(1))

  (deftest apply.3
    (signals-error
     (apply)
     MatchError))

  (deftest apply.4
    (signals-error
     (apply list)
     MatchError))

  (deftest apply.5
    (signals-error
     (apply 12 '())
     TypeError :datum 12 :expected-type 'Apv)))

(defsuite find-class

  (deftest find-class.1
    (eq (find-class 'String (the-environment))
        (class-of "foo")))

  (deftest find-class.2a
    (signals-error
     (find-class)
     MatchError))

  (deftest find-class.2b
    (signals-error
     (find-class 'foo)
     MatchError))

  (deftest find-class.3
    (signals-error
     (find-class "string" (the-environment))
     TypeError :datum "string" :expected-type 'Intern))

  (deftest find-class.4
    (signals-error
     (find-class 'does-not-exist (the-environment))
     UnboundSymbolError :symbol (class-symbol 'does-not-exist))))

(defsuite make-environment

  (deftest make-environment.1
    (let ((env (make-environment)))
      (boundp 'def env))
    #f)

  (deftest make-environment.2
    (let* ((env (make-environment (the-environment)))
           (child (make-environment env)))
      (assert (not (boundp 'x env)))
      (assert (not (boundp 'x child)))
      (eval '(def x 1) env)
      (assert (boundp 'x env))
      (assert (boundp 'x child))
      (assert (= 1 (eval 'x env)))
      (assert (= 1 (eval 'x child))))
    #inert)

  (deftest make-environment.3
    (signals-error
     (make-environment 12)
     TypeError :datum 12 :expected-type '(or Null Env))))

(defsuite cxxr

  (deftest caar.1
    (caar '((1 2) (3 4) (5 6)))
    1)

  (deftest caar.2
    (signals-error
     (caar)
     MatchError))

  (deftest caar.3
    (signals-error
     (caar 1)
     TypeError :datum 1 :expected-type 'Cons))

  (deftest cadr.1
    (cadr '((1 2) (3 4) (5 6)))
    '(3 4))

  (deftest cadr.2
    (signals-error
     (cadr)
     MatchError))

  (deftest cadr.3
    (signals-error
     (cadr 1)
     TypeError :datum 1 :expected-type 'Cons))

  (deftest cddr.1
    (cddr '((1 2) (3 4) (5 6)))
    '((5 6)))

  (deftest cddr.2
    (signals-error
     (cddr)
     MatchError))

  (deftest cddr.3
    (signals-error
     (cddr 1)
     TypeError :datum 1 :expected-type 'Cons))

  (deftest cdar.1
    (cdar '((1 2) (3 4) (5 6)))
    '(2))

  (deftest cdar.2
    (signals-error
     (cdar)
     MatchError))

  (deftest cdar.3
    (signals-error
     (cdar 1)
     TypeError :datum 1 :expected-type 'Cons))

(defsuite when

  (deftest when.1
    (when #t)
    #inert)

  (deftest when.2
    (when #f)
    #inert)

  (deftest when.3
    (when #t 1 2 (= 1 1))
    #t)

  (deftest when.4
    (when #f 1 2 3)
    #inert)

  (deftest when.5
    (signals-error
     (when)
     MatchError))

  (deftest when.6
    (signals-error
     (when 1)
     TypeError :datum 1 :expected-type 'Boolean))))

(defsuite unless

  (deftest unless.1
    (unless #t)
    #inert)

  (deftest unless.2
    (unless #f)
    #inert)

  (deftest unless.3
    (unless #f 1 2 (= 1 1))
    #t)

  (deftest unless.4
    (unless #t 1 2 3)
    #inert)

  (deftest unless.5
    (signals-error
     (unless)
     MatchError))

  (deftest unless.6
    (signals-error
     (unless 1)
     TypeError :datum 1 :expected-type 'Boolean)))

(defsuite null

  (deftest null.1
    (null #null)
    #t)

  (deftest null.2
    (null '(1))
    #f)

  (deftest null.3
    (signals-error
     (null)
     MatchError))

  (deftest null.4
    (null 1)
    #f))

(defsuite consp

  (deftest consp.1
    (consp #null)
    #f)

  (deftest consp.2
    (consp '(1))
    #t)

  (deftest consp.3
    (signals-error
     (consp)
     MatchError))

  (deftest consp.4
    (consp 1)
    #f))

(defsuite identity

  (deftest identity.1
    (identity #null)
    #null)

  (deftest identity.2
    (identity '(1))
    '(1))

  (deftest identity.3
    (signals-error
     (identity)
     MatchError))

  (deftest identity.4
    (identity (+ 1 1))
    2))

(defsuite compose

  (deftest compose.1
    (signals-error
     (compose)
     MatchError))

  (deftest compose.2
    (signals-error
     (compose (lambda ()))
     MatchError))

  (deftest compose.3
    (typep (compose (lambda ()) (lambda ())) Function))

  (deftest compose.4
    ((compose identity identity) 12)
    12)

  (deftest compose.5
    ((compose list length) 'a 'b 'c)
    3)

  (deftest compose.6
    ((compose list car) 'a 'b 'c)
    'a))

(defsuite mapcar

  (deftest mapcar.1
    (mapcar intern ())
    ())

  (deftest mapcar.2
    (mapcar intern '("foo" "bar"))
    '(foo bar))

  (deftest mapcar.3
    (signals-error
     (mapcar)
     MatchError))

  (deftest mapcar.4
    (signals-error
     (mapcar intern)
     MatchError))

  (deftest mapcar.5
    (signals-error
     (mapcar intern 12)
     TypeError :datum 12 :expected-type 'Cons))

  (deftest mapcar.6
    (signals-error
     (mapcar 12 '(1))
     TypeError :datum 12 :expected-type 'Combinable)))

(defsuite reduce

  (deftest reduce.1
    (reduce %* (list 1 2 3) :initial-value 10)
    60)

  (deftest reduce.2
    (reduce %* (list) :initial-value 10)
    10)

  (deftest reduce.3
    (signals-error
     (reduce)
     MatchError))

  (deftest reduce.4
    (signals-error
     (reduce %*)
     MatchError))

  (deftest reduce.5
    (signals-error
     (reduce %* (list))
     MatchError))

  (deftest reduce.ansi.3
    (reduce cons '(a b c d e f) :initial-value 'z)
    '((((((z . a) . b) . c) . d) . e) . f))

  (deftest reduce.clhs.1
    (reduce list '(1 2 3 4) :initial-value 'foo)
    '((((foo 1) 2) 3) 4)))

(defsuite mapc

  (deftest mapc.1
    (signals-error
     (mapc)
     MatchError))

  (deftest mapc.2
    (signals-error
     (mapc (lambda (x) x))
     MatchError))

  (deftest mapc.3
    (signals-error
     (mapc "foo" '(1 2 3))
     TypeError :datum "foo" :expected-type 'Combinable))

  (deftest mapc.4
    (signals-error
     (mapc (lambda (x) x) "foo")
     TypeError :datum "foo" :expected-type 'Cons))

  (deftest mapc.5
    (let ((ct 0))
      (def env (the-environment))
      (mapc (lambda (x) (set env ct (+ ct x)))
            '(1 2 3 4))
      ct)
    10)

  (deftest mapc.6
    (let ((list (list 1 2 3)))
      (mapc (lambda (x)) list))
    (list 1 2 3)))

(defsuite mapcan

  (deftest mapcan.1
    (mapcar (lambda ()) ())
    ())

  (deftest mapcan.2
    (mapcan list '("foo" "bar"))
    '("foo" "bar"))

  (deftest mapcan.3
    (signals-error
     (mapcan)
     MatchError))

  (deftest mapcan.4
    (signals-error
     (mapcan list)
     MatchError))

  (deftest mapcan.5
    (signals-error
     (mapcan list 12)
     TypeError :datum 12 :expected-type 'Cons))

  (deftest mapcan.6
    (signals-error
     (mapcan 12 '(1))
     TypeError :datum 12 :expected-type 'Combinable))

  (deftest mapcan.7
    (mapcan (lambda (x) (if (typep x Integer) (list x) #null))
            '(a 1 b c 3 4 d 5))
    '(1 3 4 5))

  (deftest mapcan.8
    (mapcan (lambda (x) (list (+ x 10) 'x)) '(1 2 3 4))
    '(11 x 12 x 13 x 14 x)))

(defsuite dolist

  (deftest dolist.1
    (signals-error
     (dolist)
     MatchError))

  (deftest dolist.2
    (signals-error
     (dolist ())
     MatchError))

  (deftest dolist.3
    (signals-error
     (dolist (x))
     MatchError))

  (deftest dolist.4
    (dolist (x '(1 2 3)))
    #inert)

  (deftest dolist.5
    (signals-error
     (dolist (x "not-a-list"))
     TypeError :datum "not-a-list" :expected-type 'Cons))

  (deftest dolist.6
    (signals-error
     (dolist ("not-a-symbol" '(1 2 3)))
    TypeError :datum '("not-a-symbol") :expected-type '(or Null Ignore Symbol)))

  (deftest dolist.7
    (let ((ct 0))
      (def env (the-environment))
      (assert (= #inert (dolist (x '(1 2 3 4))
                         'bla
                         (set env ct (+ ct x)))))
      ct)
    10)

  (deftest dolist.8
    (let ((ct 0))
      (def env (the-environment))
      (dolist (x '(1 2 3 4) (+ ct 100))
        'bla
        (set env ct (+ ct x))))
    110)

  (deftest dolist.9
    (dolist (x '(1 2 3) x))
    '()))

(defsuite nth

  (deftest nth.1
    (signals-error
     (nth)
     MatchError))

  (deftest nth.2
    (signals-error
     (nth '())
     MatchError))

  (deftest nth.3
    (signals-error
     (nth #t '(1 2))
     TypeError :datum #t :expected-type 'Integer))

  (deftest nth.3a
    (signals-error
     (nth 1 '())
     TypeError :datum '() :expected-type 'Cons))

  (deftest nth.4
    (signals-error
     (nth 0 "foo")
     TypeError :datum "foo" :expected-type 'Cons))

  (deftest nth.5
    (nth 0 '(1 2))
    1)

  (deftest nth.6
    (nth 1 '(1 2))
    2)

  (deftest nth.7
    (signals-error
     (nth 2 '(1 2))
     TypeError :datum () :expected-type 'Cons)))

(defsuite reverse

  (deftest reverse.1
    (signals-error
     (reverse)
     MatchError))

  (deftest reverse.2
    (signals-error
     (reverse "foo")
     TypeError :datum "foo" :expected-type '(or Null List)))

  (deftest reverse.3
    (signals-error
     (reverse "foo" "bar")
     MatchError))

  (deftest reverse.4
    (reverse ())
    ())

  (deftest reverse.5
    (reverse '(1))
    '(1))

  (deftest reverse.6
    (reverse '(1 2 3))
    '(3 2 1)))

(defsuite append

  (deftest append.1
    (signals-error
     (append)
     MatchError))

  (deftest append.2
    (signals-error
     (append '())
     MatchError))

  (deftest append.3
    (signals-error
     (append 1 '())
     TypeError :datum 1 :expected-type '(or Null List)))

  (deftest append.4
    (append '() '())
    '())

  (deftest append.5
    (append '() 12)
    12)

  (deftest append.6
    (append '(1) 12)
    '(1 . 12))

  (deftest append.7
    (append '(1 2) 12)
    '(1 2 . 12))

  (deftest append.8
    (append '(1 2) '(3 4))
    '(1 2 3 4)))

(defsuite length

  (deftest length.1
    (signals-error
     (length)
     Error))

  (deftest length.2
    (signals-error
     (length #f)
     Error)))

(defsuite list-length

  (deftest list-length.1
    (length '())
    0)

  (deftest list-length.2
    (length '(1 2 3))
    3))

(defsuite nthcdr

  (deftest nthcdr.1
    (signals-error
     (nthcdr)
     MatchError))

  (deftest nthcdr.2
    (signals-error
     (nthcdr 1)
     MatchError))

  (deftest nthcdr.3
    (signals-error
     (nthcdr "foo" '())
     TypeError :datum "foo" :expected-type 'Integer))

  (deftest nthcdr.4
    (signals-error
     (nthcdr 12 "foo")
     TypeError :datum "foo" :expected-type 'Cons))

  (deftest nthcdr.5
    (nthcdr 0 '())
    '())

  (deftest nthcdr.6
    (signals-error
     (nthcdr 1 '())
     OutOfBoundsError))

  (deftest nthcdr.7
    (signals-error
     (nthcdr 2 '(1))
     OutOfBoundsError))

  (deftest nthcdr.8
    (signals-error
     (nthcdr 3 '(1))
     OutOfBoundsError))

  (deftest nthcdr.9
    (nthcdr 0 '(1 2 3))
    '(1 2 3))

  (deftest nthcdr.10
    (nthcdr 1 '(1 2 3))
    '(2 3))

  (deftest nthcdr.11
    (nthcdr 2 '(1 2 3))
    '(3))

  (deftest nthcdr.12
    (nthcdr 3 '(1 2 3))
    '())

  (deftest nthcdr.13
    (signals-error
     (nthcdr 4 '(1 2 3))
     OutOfBoundsError)))

(defsuite subseq

  (deftest subseq.1
    (signals-error
     (subseq)
     Error))

  (deftest subseq.2
    (signals-error
     (subseq '())
     MatchError))

  (deftest subseq.3
    (signals-error
     (subseq 12 1 2)
     UnboundMethodError :class Integer :method-name 'subseq)))

(defsuite list-subseq

  (deftest list-subseq.4
    (signals-error
     (subseq '() "a" 2)
     TypeError :datum "a" :expected-type 'Integer))

  (deftest list-subseq.5
    (signals-error
     (subseq '() 1 "b")
     TypeError :datum "b" :expected-type 'Integer))

  (deftest list-subseq.6
    (signals-error
     (subseq '() 1)
     OutOfBoundsError))

  (deftest list-subseq.7
    (signals-error
     (subseq '() 0 1)
     OutOfBoundsError))

  (deftest list-subseq.8
    (subseq '() 0)
    '())

  (deftest list-subseq.9
    (subseq '() 0 0)
    '())

  (deftest list-subseq.10
    (subseq '() 0 #inert)
    '())

  (deftest list-subseq.11
    (subseq '(1 2 3) 0)
    '(1 2 3))

  (deftest list-subseq.12
    (subseq '(1 2 3) 0 #inert)
    '(1 2 3))

  (deftest list-subseq.13
    (subseq '(0 1 2 3 4 5) 2)
    '(2 3 4 5))

  (deftest list-subseq.14
    (subseq '(0 1 2 3 4 5) 3 5)
    '(3 4))

  (deftest list-subseq.15
    (subseq '(0 1 2 3 4 5) 0 6)
    '(0 1 2 3 4 5))

  (deftest list-subseq.16
    (signals-error
     (subseq '(0 1 2 3 4 5) 0 7)
     OutOfBoundsError))

  (deftest list-subseq.17
    (signals-error
     (subseq '(0 1 2 3 4 5) 7 10)
     OutOfBoundsError))

  (deftest list-subseq.18
    (subseq '(0 1 2 3 4 5) 6)
    '()))

(defsuite string-subseq

  (deftest string-subseq.2
    (signals-error
     (subseq "")
     MatchError))

  (deftest string-subseq.4
    (signals-error
     (subseq "" "a" 2)
     TypeError :datum "a" :expected-type 'Integer))

  (deftest string-subseq.5
    (signals-error
     (subseq "foo" 1 "b")
     TypeError :datum "b" :expected-type 'Integer))

  (deftest string-subseq.6
    (signals-error
     (subseq "" 1)
     OutOfBoundsError))

  (deftest string-subseq.7
    (signals-error
     (subseq "" 0 1)
     OutOfBoundsError))

  (deftest string-subseq.8
    (subseq "" 0)
    "")

  (deftest string-subseq.9
    (subseq "" 0 0)
    "")

  (deftest string-subseq.10
    (subseq "" 0 #inert)
    "")

  (deftest string-subseq.10.1
    (signals-error
     (subseq "" 1 #inert)
     OutOfBoundsError))

  (deftest string-subseq.11
    (subseq "123" 0)
    "123")

  (deftest string-subseq.12
    (subseq "123" 0 #inert)
    "123")

  (deftest string-subseq.13
    (subseq "012345" 2)
    "2345")

  (deftest string-subseq.14
    (subseq "012345" 3 5)
    "34")

  (deftest string-subseq.15
    (subseq "012345" 0 6)
    "012345")

  (deftest string-subseq.16
    (signals-error
     (subseq "012345" 0 7)
     OutOfBoundsError))

  (deftest string-subseq.17
    (signals-error
     (subseq "012345" 7 10)
     OutOfBoundsError))

  (deftest string-subseq.18
    (subseq "012345" 6)
     ""))

(defsuite elt

  (deftest elt.1
    (signals-error
     (elt)
     Error))

  (deftest elt.2
    (signals-error
     (elt #t 0)
     Error)))

(defsuite list-elt

  (deftest list-elt.2
    (signals-error
     (elt '())
     MatchError))

  (deftest list-elt.3a
    (signals-error
     (elt '() 1)
     UnboundMethodError :class Null :method-name 'elt))

  (deftest list-elt.5
    (elt '(1 2) 0)
    1)

  (deftest list-elt.6
    (elt '(1 2) 1)
    2)

  (deftest list-elt.7
    (signals-error
     (elt '(1 2) 2)
     TypeError :datum '() :expected-type 'Cons)))

(defsuite member

  (deftest member.1
    (signals-error
     (member)
     MatchError))

  (deftest member.2
    (signals-error
     (member 'a)
     MatchError))

  (deftest member.3
    (member 'a '() :test eq)
    #null)

  (deftest member.3a
    (member 'a '())
    #null)

  (deftest member.4
    (member 'b '(a) :test eq)
    #null)

  (deftest member.5
    (member 'b '(a b) :test eq)
    '(b))

  (deftest member.5b
    (member  'x '(a b) :test eq)
    #null)

  (deftest member.6
    (member 'b '(a b c) :test eq)
    '(b c))

  (deftest member.6a
    (member 'b '(a b c))
    '(b c))

  (deftest member.7
    (member "b" '("a" "b" "c") :test eq)
    #null)

  (deftest member.7a
    (member "b" '("a" "b" "c"))
    #null)

  (deftest member.8
    (member "b" '("a" "b" "c") :test =)
    '("b" "c"))

  (deftest member.9
    (member 'b '((2 a) (1 b) (3 c)) :key cadr)
    '((1 b) (3 c)))

  (deftest member.9a
    (member "b" '((2 "a") (1 "b") (3 "c")) :key cadr)
    #null)

  (deftest member.9b
    (member "b" '((2 "a") (1 "b") (3 "c")) :key cadr :test =)
    '((1 "b") (3 "c"))))

(defsuite remove-if

  (deftest remove-if.1
    (signals-error
     (remove-if)
     MatchError))

  (deftest remove-if.2
    (signals-error
     (remove-if (lambda (item) #t))
     MatchError))

  (deftest remove-if.3
    (signals-error
     (remove-if (lambda (item) #t) 12)
     TypeError :datum 12 :expected-type 'Cons))

  (deftest remove-if.4
    (signals-error
     (remove-if 1 '(1 2))
     TypeError :datum 1 :expected-type 'Combinable))

  (deftest remove-if.5
    (remove-if (lambda (item) (= 1 item)) '(1 2 3 1 2 3))
    '(2 3 2 3))

  (deftest remove-if.6
    (remove-if (lambda (item) (= 1 item)) '())
    '()))

(defsuite get?

  (deftest get?.1
    (get? '(:foo 1 :bar 2) :foo)
    (some 1))

  (deftest get?.2
    (get? '(:foo 1 :bar 2) :bar)
    (some 2))

  (deftest get?.3
    (get? '() :bar)
    #null)

  (deftest get?.4
    (get? '(:foo 1 :bar 2) :quux)
    #null)

  (deftest get?.5
    (signals-error
     (get?)
     MatchError)
    #t)

  (deftest get?.6
    (signals-error
     (get? '())
     MatchError)
    #t)

  (deftest get?.7
    (signals-error
     (get? 12 :quux)
     MatchError)
    #t))

(defsuite and

  (deftest and.1
    (and)
    #t)

  (deftest and.2
    (and #t #f)
    #f)

  (deftest and.3
    (and #t (= 1 1) #t)
    #t)

  (deftest and.4
    (signals-error
     (and #t #t 1)
     TypeError :datum 1 :expected-type 'Boolean))

  (deftest and.5
    (progn
      (def x 1)
      (def env (the-environment))
      (and #f (set env x 2))
      x)
    1))

(defsuite or

  (deftest or.1
    (or)
    #f)

  (deftest or.2
    (or #t #f)
    #t)

  (deftest or.3
    (or #t #t #t)
    #t)

  (deftest or.4
    (or #f #f #f)
    #f)

  (deftest or.5
    (signals-error
     (or #f #f 1)
     TypeError :datum 1 :expected-type 'Boolean))

  (deftest or.6
    (progn
      (def x 1)
      (def env (the-environment))
      (or #t (set env x 2))
      x)
    1))

(defsuite make-instance

  (deftest make-instance.1
    (progn
      (def obj (make-instance TypeError :datum 1 :expected-type 'String))
      (assert (= (slot-value obj 'datum) 1))
      (assert (= (slot-value obj :datum) 1))
      (assert (= (slot-value obj 'expected-type) 'String))
      (assert (= (slot-value obj :expected-type) 'String)))
    #inert)

  (deftest make-instance.2
    (signals-error
     (make-instance)
     MatchError))

  (deftest make-instance.3
    (signals-error
     (make-instance 3)
     TypeError :datum 3 :expected-type '(or Box Obj)))

  (deftest make-instance.4
    (signals-error
     (make-instance Object)
     TypeError :datum Object :expected-type '(or Box Obj)))

  (deftest make-instance.5
    (signals-error
     (make-instance StandardObject :x)
     AssertionError)))

(defsuite slots

  (deftest slots.1
    (progn
      (def obj (make-instance StandardObject))
      (assert (not (slot-bound-p obj 'x)))
      (assert (not (slot-bound-p obj :x)))
      (assert (signals-error (slot-value obj 'x)
                             UnboundSlotError :object obj :slot-name 'x))
      (assert (signals-error (slot-value obj :x)
                             UnboundSlotError :object obj :slot-name :x))
      (set-slot-value obj 'x 1)
      (assert (slot-bound-p obj 'x))
      (assert (slot-bound-p obj :x))
      (assert (= (slot-value obj 'x) 1))
      (assert (= (slot-value obj :x) 1))
      (set-slot-value obj 'x 2)
      (assert (= (slot-value obj 'x) 2))
      (assert (= (slot-value obj :x) 2)))
    #inert)

  (deftest slot-value.1
    (signals-error
     (slot-value "foo" 'x)
     TypeError :datum "foo" :expected-type 'Obj))

  (deftest slot-value.1a
    (signals-error
     (slot-value (make-instance StandardObject) "x")
     TypeError :datum "x" :expected-type 'Intern))

  (deftest slot-value.2
    (signals-error
     (slot-value (make-instance StandardObject))
     MatchError))

  (deftest slot-value.3
    (signals-error
     (slot-value)
     MatchError))

  (deftest set-slot-value.1
    (signals-error
     (set-slot-value "foo" 'x 1)
     TypeError :datum "foo" :expected-type 'Obj))

  (deftest set-slot-value.1a
    (signals-error
     (set-slot-value (make-instance StandardObject) "x" 1)
     TypeError :datum "x" :expected-type 'Intern))

  (deftest set-slot-value.2
    (signals-error
     (set-slot-value (make-instance StandardObject))
     MatchError))

  (deftest set-slot-value.3
    (signals-error
     (set-slot-value (make-instance StandardObject) 'x)
     MatchError))

  (deftest slot-bound-p.1
    (signals-error
     (slot-bound-p "foo" 'x)
     TypeError :datum "foo" :expected-type 'Obj))

  (deftest slot-bound-p.1a
    (signals-error
     (slot-bound-p (make-instance StandardObject) "x")
     TypeError :datum "x" :expected-type 'Intern))

  (deftest slot-bound-p.2
    (signals-error
     (slot-bound-p)
     MatchError))

  (deftest slot-bound-p.3
    (signals-error
     (slot-bound-p (make-instance StandardObject))
     MatchError)))

(defsuite let

  (deftest let.1
    (let ((x 1))
      x)
    1)

  (deftest let.2
    (let ((x 1))
      (let ((x 2))
        x))
    2)

  (deftest let.3
    (let ((x 1))
      (let ((x 2)))
      x)
    1)

  (deftest let.4
    (let ((x 1))
      (let ((x 2)
            (it x))
        it))
    1)

  (deftest let.5
    (let ())
    #inert)

  (deftest let.6
    (signals-error
     (let)
     MatchError))

  (deftest let.7
    (signals-error
     (let #t)
     TypeError :datum #t :expected-type 'Cons))

  (deftest let.8
    (signals-error
     (let ((#t 1)))
     TypeError :datum '(#t) :expected-type '(or Null Ignore Symbol))))

(defsuite let*

  (deftest let*.1
    (let* ((x 1)
           (y x)
           (z y))
      (list x y z))
    '(1 1 1))

  (deftest let*.2
    (let* ())
    #inert)

  (deftest let*.3
    (signals-error
     (let*)
     MatchError))

  (deftest let*.4
    (signals-error
     (let* #t)
     TypeError :datum #t :expected-type 'Cons))

  (deftest let*.5
    (signals-error
     (let* ((#t 1)))
     TypeError :datum '(#t) :expected-type '(or Null Ignore Symbol))))

(defsuite flet

  (deftest flet.1
    (flet ((f () 1))
          (flet ((f () 2)
                 (g () (f)))
                (g)))
    1)

  (deftest flet.2
    (flet ((foo ()))
          (foo))
    #inert)

  (deftest flet.2
    (flet ((foo (x) x))
          (foo 1))
    1)

  (deftest flet.3
    (signals-error
     (flet)
     MatchError))

  (deftest flet.4
    (signals-error
     (flet #t)
     TypeError :datum #t :expected-type 'Cons))

  (deftest flet.5
    (flet ())
    #inert))

(defsuite labels

  (deftest labels.1
    (labels ((f () 1))
            (labels ((f () 2)
                     (g () (f)))
                    (g)))
    2)

  (deftest labels.2
    (labels ((foo ()))
            (foo))
    #inert)

  (deftest labels.3
    (labels ((foo (x) x))
            (foo 1))
    1)

  (deftest labels.4
    (signals-error
     (labels)
     MatchError))

  (deftest labels.5
    (signals-error
     (labels #t)
     TypeError :datum #t :expected-type 'Cons))

  (deftest labels.6
    (labels ())
    #inert))

(defsuite loop-let

  (deftest loop-let.1
    (signals-error
     (loop-let)
     MatchError))

  (deftest loop-let.2
    (signals-error
     (loop-let -name-)
     MatchError))

  (deftest loop-let.3
    (loop-let -name- ())
    #inert)

  (deftest loop-let.4
    (loop-let -sum- ((as (list 1 2 3))
                     (bs (list 4 5 6)))
      (if (null as)
          #null
          (cons (+ (car as) (car bs))
                (-sum- (cdr as) (cdr bs)))))
    '(5 7 9)))

(defsuite while

  (deftest while.1
    (signals-error
     (while)
     MatchError))

  (deftest while.2
    (while (= 1 2))
    #inert)

  (deftest while.3
    (signals-error
     (while 12)
     TypeError :datum 12 :expected-type 'Boolean))

  (deftest while.4
    (progn
      (def x 0)
      (def y 0)
      (def env (the-environment))
      (while (< x 5)
        (set env x (+ x 1))
        (set env y (+ y 1)))
      (list x y))
    '(5 5)))

(defsuite until

  (deftest until.1
    (signals-error
     (until)
     MatchError))

  (deftest until.2
    (until (/= 1 2))
    #inert)

  (deftest until.3
    (signals-error
     (until 12)
     TypeError :datum 12 :expected-type 'Boolean))

  (deftest until.4
    (progn
      (def x 0)
      (def y 0)
      (def env (the-environment))
      (until (> x 4)
        (set env x (+ x 1))
        (set env y (+ y 1)))
      (list x y))
    '(5 5)))

(defsuite dotimes

  (deftest dotimes.1
    (dotimes (temp-one 10 temp-one))
    10)

  (deftest dotimes.2
    (progn
      (def temp-two 0)
      (def env (the-environment))
      (dotimes (temp-one 10 #t) (set env temp-two (+ temp-two 1)))
      temp-two)
    10)

  (deftest dotimes.3
    (signals-error
     (dotimes)
     MatchError))

  (deftest dotimes.4
    (signals-error
     (dotimes (x))
     MatchError))

  (deftest dotimes.5
    (dotimes (x 0))
    #inert)

  (deftest dotimes.6
    (dotimes (x 1))
    #inert)

  (deftest dotimes.7
    (dotimes (x 1) 1 2 3)
    #inert)

  (deftest dotimes.8
    (signals-error
     (dotimes (x "foo") 1 2 3)
     TypeError :datum "foo" :expected-type 'Number))

  (deftest dotimes.9
    (progn
      (def x 0)
      (def y 0)
      (def env (the-environment))
      (dotimes (i 5 (list x y))
        (set env x (+ x 1))
        (set env y (+ y 1))))
    '(5 5)))

(defsuite optional

  (deftest optional.1
    (optional '())
    #inert)

  (deftest optional.2
    (optional '() "default")
    "default")

  (deftest optional.3
    (optional (some 1))
    1)

  (deftest optional.4
    (optional (some 1) "default")
    1)

  (deftest optional.5
    (signals-error
     (optional)
     MatchError))

  (deftest optional.6
    (signals-error
     (optional 1)
     TypeError :datum 1 :expected-type 'Cons))

  (deftest optional.lazy.1
    (optional (some 1) (error (make-simple-error "foo")))
    1)

  (deftest optional.lazy.2
    (signals-error
     (optional #null (error (make-simple-error "foo")))
     SimpleError :message "foo")))

(defsuite optionals

  (deftest optionals.1
    (optionals '())
    '())

  (deftest optionals.2
    (optionals '() 1)
    '(1))

  (deftest optionals.3
    (optionals '() 1 2)
    '(1 2))

  (deftest optionals.4
    (optionals '(4) 1 2)
    '(4 2))

  (deftest optionals.5
    (optionals '(4 5) 1 2)
    '(4 5))

  (deftest optionals.6
    (optionals '(4 5 6) 1 2)
    '(4 5 6))

  (deftest optionals.7
    (optionals '(4 5 6))
    '(4 5 6)))

(defsuite get-option

  (deftest get-option.1
    (signals-error
     (get-option)
     MatchError))

  (deftest get-option.2
    (get-option (some 2))
    2)

  (deftest get-option.3
    (signals-error
     (get-option #null)
     SimpleError :message "Option is nil")))

(defsuite some

  (deftest some.1
    (some 1)
    (list 1))

  (deftest some.2
    (signals-error
     (some)
     MatchError))

  (deftest some.3
    (signals-error
     (some 1 2)
     MatchError)))

(defsuite if-option

  (deftest if-option.1
    (if-option (x (some 12))
               x
               14)
    12)

  (deftest if-option.2
    (if-option (x #null)
               x
               14)
    14)

  (deftest if-option.3
    (signals-error
     (if-option)
     MatchError))

  (deftest if-option.4
    (signals-error
     (if-option (name))
     MatchError))

  (deftest if-option.4.2
    (signals-error
     (if-option (name) then)
     MatchError))

  (deftest if-option.5
    (signals-error
     (if-option (name option))
     MatchError))

  (deftest if-option.6
    (signals-error
     (if-option (name option) then)
     MatchError)))

(defsuite when-option

  (deftest when-option.0
    (when-option (x (some 12)))
    #inert)

  (deftest when-option.1
    (when-option (x (some 12))
                 x)
    12)

  (deftest when-option.2
    (when-option (x #null)
                 x)
    #null)

  (deftest when-option.3
    (signals-error
     (when-option)
     MatchError))

  (deftest when-option.4
    (signals-error
     (when-option (name))
     MatchError)))

(defsuite unless-option

  (deftest unless-option.0
    (unless-option (some 12) 2 3 (+ 2 2))
    #null)

  (deftest unless-option.1
    (unless-option #null 2 3 (+ 2 2))
    4)

  (deftest unless-option.2
    (unless-option #null)
    #inert)

  (deftest unless-option.3
    (signals-error
     (unless-option)
     MatchError)))

(defsuite class-of

  (deftest class-of.1
    (progn
      (assert (eq (class-of "foo") String))
      (assert (eq (class-of 12) Integer))
      (assert (eq (class-of String) Built-in-class)))
    #inert)

  (deftest class-of.2
    (signals-error
     (class-of)
     MatchError)))

(defsuite set

  (deftest set.1
    (progn
      (set (the-environment) x 1)
      x)
    1)

  (deftest set.2
    (progn
      (def x 0)
      (set (the-environment) x 1)
      x)
    1)

  (deftest set.3
    (progn
      (set (the-environment) (x y) (list 1 2))
      (list x y))
    '(1 2))

  (deftest set.4
    (signals-error
     (set)
     MatchError))

  (deftest set.5
    (signals-error
     (set (the-environment))
     MatchError))

  (deftest set.6
    (signals-error
     (set (the-environment) x)
     MatchError))

  (deftest set.7
    (signals-error
     (set 33 x y)
     TypeError :datum 33 :expected-type 'Env)))

(defsuite class-name

  (deftest class-name.1
    (signals-error
     (class-name)
     MatchError))

  (deftest class-name.2
    (signals-error
     (class-name "foo")
     TypeError :datum "foo" :expected-type 'Class))

  (deftest class-name.3
    (class-name Object)
    "Object"))

(defsuite subclassp

  (deftest subclassp.1
    (signals-error
     (subclassp)
     MatchError))

  (deftest subclassp.2
    (signals-error
     (subclassp Object)
     MatchError))

  (deftest subclassp.3
    (signals-error
     (subclassp Object "foo")
     TypeError :datum "foo" :expected-type 'Class))

  (deftest subclassp.4
    (signals-error
     (subclassp "foo" Object)
     TypeError :datum "foo" :expected-type 'Class))

  (deftest subclassp.5
    (and (subclassp Object Object)
         (subclassp Class Object)
         (subclassp StandardClass Class)
         (subclassp StandardClass Object))
    #t))

;; Utility used by `%make-standard-class' and `defclass' tests.

(defun classes-test (c d p q)
  (assert (typep c StandardClass))
  (assert (typep c Class))
  (assert (typep c Object))
  (assert (= (class-name c) "Point2d"))
  (assert (subclassp c StandardObject))
  (assert (subclassp c Object))

  (assert (typep p c))
  (assert (typep p StandardObject))
  (assert (typep p Object))
  (assert (= (slot-value p 'x) 1))
  (assert (= (slot-value p 'y) 2))

  (assert (typep d StandardClass))
  (assert (typep d Class))
  (assert (typep d Object))
  (assert (= (class-name d) "Point3d"))
  (assert (subclassp d c))
  (assert (subclassp d StandardObject))
  (assert (subclassp d Object))

  (assert (typep q d))
  (assert (typep q c))
  (assert (typep q StandardObject))
  (assert (typep q Object))
  (assert (= (slot-value q 'x) 1))
  (assert (= (slot-value q 'y) 2))
  (assert (= (slot-value q 'z) 3)))

(defsuite %make-standard-class

  (deftest %make-standard-class.1
    (let* ((c (%make-standard-class 'Point2d StandardObject))
           (d (%make-standard-class 'Point3d c))
           (p (make-instance c :x 1 :y 2))
           (q (make-instance d :x 1 :y 2 :z 3)))
      (classes-test c d p q))
    #inert)

  (deftest %make-standard-class.2
    (signals-error
     (%make-standard-class 'Foo Object)
     TypeError :datum Object :expected-type '(or Box Obj)))

  (deftest %make-standard-class.3
    (signals-error
     (%make-standard-class 'Foo)
     MatchError))

  (deftest %make-standard-class.4
    (signals-error
     (%make-standard-class)
     MatchError))

  (deftest %make-standard-class.5
    (signals-error
     (%make-standard-class "foo" StandardObject)
     TypeError :datum "foo" :expected-type 'Symbol)))

(defsuite %reinitialize-standard-class

  (deftest* %reinitialize-standard-class.1
    (let* ((a (%make-standard-class 'A StandardObject))
           (b (%make-standard-class 'B a))
           (c (%make-standard-class 'C b))
           (d (%make-standard-class 'D StandardObject))
           (e (%make-standard-class 'E d)))
      (assert (subclassp b a))
      (assert (subclassp c a))
      (assert (subclassp c b))
      (%reinitialize-standard-class b e)
      (assert (subclassp b e))
      (assert (subclassp b d))
      (assert (subclassp c e))
      (assert (subclassp c d))
      (assert (subclassp c b)))))

(defsuite defclass

  (deftest defclass.1
    (signals-error
     (defclass Foo () ("a"))
     TypeError :datum "a" :expected-type 'Symbol))

  (deftest defclass.2
    (signals-error
     (defclass)
     MatchError))

  (deftest defclass.3
    (signals-error
     (defclass Foo)
     MatchError))

  (deftest defclass.4
    (signals-error
     (defclass Foo ())
     MatchError))

  (deftest defclass.5
    (typep (defclass C () ()) StandardClass))

  (deftest defclass.6
    (progn
      (defclass Point2d () (x y))
      (defclass Point3d (Point2d) (z))
      (def p (make-instance Point2d :x 1 :y 2))
      (def q (make-instance Point3d :x 1 :y 2 :z 3))
      (classes-test Point2d Point3d p q))
    #inert)

  (deftest* defclass.redefine.1
    (defclass A () ())
    (defclass B (A) ())
    (defgeneric foo (x))
    (defmethod foo ((a A)) "foo")
    (def b (make-instance B))
    (assert (subclassp B A))
    (assert (typep b B))
    (assert (typep b A))
    (assert (= "foo" (foo b)))
    (defclass C () ())
    (defmethod foo ((c C)) "bar")
    (defclass B (C) ())
    (assert (subclassp B C))
    (assert (eq (class-of b) B))
    (assert (typep b B))
    (assert (typep b C))
    (assert (= "bar" (foo b)))))

(defsuite generics

  (deftest generics.1
    (progn
      (defclass Foo () ())
      (defclass Bar (Foo) ())
      (def foo (make-instance Foo))
      (def bar (make-instance Bar))

      (defgeneric g1 (obj param))
      (assert (typep g1 Function))

      (assert (signals-error
               (g1 12 (+ 1 1))
               UnboundMethodError :class Integer :method-name 'g1))
      (assert (signals-error
               (g1 foo (+ 1 1))
               UnboundMethodError :class Foo :method-name 'g1))
      (assert (signals-error
               (g1 bar (+ 1 1))
               UnboundMethodError :class Bar :method-name 'g1))

      (defmethod g1 ((obj Foo) param)
        (+ param 100))

      (assert (signals-error
               (g1 12 (+ 1 1))
               UnboundMethodError :class Integer :method-name 'g1))
      (assert (= 102 (g1 foo (+ 1 1))))
      (assert (= 102 (g1 bar (+ 1 1))))

      (defmethod g1 ((obj Bar) param)
        (+ param 1000))

      (assert (signals-error
               (g1 12 (+ 1 1))
               UnboundMethodError :class Integer :method-name 'g1))
      (assert (= 102 (g1 foo (+ 1 1))))
      (assert (= 1002 (g1 bar (+ 1 1))))

      (defmethod g1 ((obj Integer) param)
        (+ param 10000))

      (assert (= 10002 (g1 12 (+ 1 1))))
      (assert (= 102 (g1 foo (+ 1 1))))
      (assert (= 1002 (g1 bar (+ 1 1))))

      (defmethod g1 ((obj Integer) param)
        (+ param 100000))

      (assert (= 100002 (g1 12 (+ 1 1))))
      (assert (= 102 (g1 foo (+ 1 1))))
      (assert (= 1002 (g1 bar (+ 1 1))))

      (defmethod g1 ((obj Object) param)
        (- param))

      (assert (= 100002 (g1 12 (+ 1 1))))
      (assert (= 102 (g1 foo (+ 1 1))))
      (assert (= 1002 (g1 bar (+ 1 1))))
      (assert (= -2 (g1 #t (+ 1 1))))
      (assert (= -2 (g1 #inert (+ 1 1))))
      (assert (= -2 (g1 "hello" (+ 1 1)))))
    #inert))

(defsuite box

  (deftest box.1
    (let ((c (box)))
      (c))
    #inert)

  (deftest box.2
    (let ((c (box (+ 1 1))))
      (c))
    2)

  (deftest box.3
    (let ((c (box (+ 1 1))))
      (c (+ 2 2))
      (assert (= (c) 4))
      (c (+ 4 4))
      (c))
    8))

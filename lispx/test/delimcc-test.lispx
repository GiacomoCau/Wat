;;; Delimited Control Tests

;; The following tests are adapted from the file `testd0.ml' of the
;; caml-shift distribution, available at the URL
;; `http://okmij.org/ftp/continuations/implementations.html'

;; First, some preliminary definitions.

(def\ abortSubcont (prompt value)
  #|Utility that captures the continuation but just ignores it.
   |#
  (takeSubcont prompt #ignore value))

(def\ shift (p f)
  #|The `shift' operator, adapted from the file `delimcc.ml'.
   |#
  (takeSubcont p sk
    (pushPrompt p
      (f (\ (c)
           (pushDelimSubcont p sk (c)))))))

(def\ promptSet? (prompt)
  #|Return true if a prompt is set, false otherwise.
   |(Note that this leads to stack growth, i.e. leaks.)
   |#
  (handlerCase ((PromptNotFoundError (\ #ignore #f)))
    (takeSubcont prompt k (pushDelimSubcont prompt k #t))))

;; The actual tests.

(defsuite caml-shift

  (deftest test1
    (begin
      (assert (not (promptSet? 'p)))
      (pushPrompt 'p
        (assert (promptSet? 'p))
        1))
    1)

  (deftest test2
    (+ (pushPrompt 'p (pushPrompt 'p 5))
       4)
    9)

  (deftest test3
    (+ (pushPrompt 'p (+ 6 (abortSubcont 'p 5)))
       4)
    9)

  (deftest |test3'|
    (+ (pushPrompt 'p
         (pushPrompt 'p (+ 6 (abortSubcont 'p 5))))
       4)
    9)

  (deftest |test3''|
    (+ (pushPrompt 'p
         (pushPrompt 'p (+ 6 (abortSubcont 'p 5)))
         (+ (abortSubcont 'p 7)
            10))
       20)
    27)

  (deftest |test3'''|
    (signalsError
     (begin
       (pushPrompt 'p
         (pushPrompt 'p (+ 6 (abortSubcont 'p 5)))
         (+ (abortSubcont 'p 7)
            10))
       (abortSubcont 'p 9))
     PromptNotFoundError :prompt 'p))

  (deftest test4
    (+ (pushPrompt 'p
         (+ (takeSubcont 'p sk
              (pushPrompt 'p
                (pushSubcont sk 5)))
            10))
       20)
    35)

  (deftest test5
    (+ (pushPrompt 'p0
         (+ (shift 'p0 (\ (sk)
                         (+ 100 (sk (\ () (sk (\ () 3)))))))
            2))
       10)
    117)

  (deftest |test5'|
    (+ 10 (pushPrompt 'p0
            (+ 2 (shift 'p0 (\ (sk)
                              (sk (\ () (+ 3 100))))))))
    115)

  (deftest |test5''|
    (+ (pushPrompt 'p0
         (+ (shift 'p0 (\ (sk)
                         (+ (sk (\ ()
                                  (pushPrompt 'p1
                                    (+ 9 (sk (\ () (abortSubcont 'p1 3)))))))
                            100)))
            2))
       10)
    115)

  (deftest |test5'''|
    (+ (pushPrompt 'p0
         (let ((v (shift 'p0 (\ (sk)
                               (+ (sk (\ ()
                                        (pushPrompt 'p1
                                          (+ 9 (sk (\ ()
                                                     (abortSubcont 'p1 3)))))))
                                  100)))))
           (+ v 2)))
       10)
    115)

  (deftest test54
    (+ (pushPrompt 'p0
         (let ((v (shift 'p0 (\ (sk)
                               (+ (sk (\ ()
                                        (pushPrompt 'p1
                                          (+ 9 (sk (\ ()
                                                     (abortSubcont 'p0 3)))))))
                                  100)))))
           (+ v 2)))
       10)
    124)

  (deftest test6
    (+ (let\ ((push-twice (sk)
                (pushSubcont sk (pushSubcont sk 3))))
         (pushPrompt 'p1
           (pushPrompt 'p2
             (+ (takeSubcont 'p1 sk
                  (push-twice sk))
                1))))
       10)
    15)

  (deftest test7
    (+ (let\ ((push-twice (sk)
                (pushSubcont sk
                  (pushSubcont sk
                    (takeSubcont 'p2 sk2
                      (pushSubcont sk2
                        (pushSubcont sk2 3)))))))
         (pushPrompt 'p1
           (+ (pushPrompt 'p2
                (+ 10 (pushPrompt 'p3
                        (takeSubcont 'p1 sk (push-twice sk)))))
              1)))
       100)
    135)

  (deftest |test7'|
    (+ (let\ ((push-twice (sk)
                (sk (\ ()
                      (sk (\ ()
                            (shift 'p2 (\ (sk2)
                                         (sk2 (\ ()
                                                (sk2 (\ () 3))))))))))))
         (pushPrompt 'p1
           (+ (pushPrompt 'p2
                (+ 10 (pushPrompt 'p3
                        (shift 'p1 (\ (sk) (push-twice sk))))))
              1)))
       100)
    135))

;;; Delimited DVar Binding

;; The following tests are adapted from the files `caml-dynvar.ml' and
;; `dynvar-scheme48-problem.scm' of the DBplusDC distribution, available
;; at the URL `http://okmij.org/ftp/Computation/dget-binding.html'

(def\ dset:prv (dynvar value)
  #|Set the value of a dget variable and return the old value.
   |#
  (prog1 (dget dynvar)
    (dset dynvar value)))

(defsuite dbplusdc

  (deftest testc
    (begin
      (ddef *p*)
      (dlet ((*p* 0))
        (let\ ((f () (dget *p*)))
          (let ((x (f))
                (y (dlet ((*p* 1)) (f)))
                (z (f)))
            (list x y z)))))
    '(0 1 0))

  (deftest test1
    (begin
      (ddef *p*)
      (dlet ((*p* 1))
        (list (dget *p*) (dget *p*))))
    '(1 1))

  (deftest test11
    (begin
      (ddef *p*)
      (dlet ((*p* 1))
        (list (dget *p*)
              (dget *p*)
              (dlet ((*p* 2))
                (dget *p*)))))
    '(1 1 2))

  ;; It's probably a happy accident that this test works, since
  ;; our `dsetPrv' is pretty different from DBplusDC's.
  (deftest test12
    (begin
      (ddef *p*)
      (dlet ((*p* 1))
        (let* ((v1 (dget *p*))
               (v2 (dlet ((*p* 2))
                     (let ((v3 (dset:prv *p* 12))
                           (v4 (dget *p*)))
                       (list v3 v4)))))
          (let ((v5 (dget *p*)))
            (list v1 v2 v5)))))
    '(1 (2 12) 1))

  (deftest test_eq4
    (begin
      (ddef *p*)
      (dlet ((*p* 1))
        (pushPrompt 'p0
          (dget *p*))))
    1)

  (deftest test_eq5
    (begin
      (ddef *p*)
      (dlet ((*p* 1))
        (pushPrompt 'p0
          (dlet ((*p* 2))
            (takeSubcont 'p0 #ignore
              (dget *p*))))))
    1)

  (deftest test_eq6
    (begin
      (ddef *p*)
      (ddef *q*)
      ((\ (f)
         (dlet ((*p* 2) (*q* 20))
           (f (\ () 0))))
       (dlet ((*p* 1))
         (pushPrompt 'p
           (dlet ((*q* 10))
             ((\ (x) (+ (dget *p*) (dget *q*)))
              (shift 'p (\ (f) f))))))))
    12))

;;; Tests for single prompt coroutines

(defsuite |Coroutines|

  (deftest |Adapted from A Monadic Framework for Delimited Continuations|
    (+ 2 (coroutine (if (yield k (+ (resume k #f) (resume k #t)))
                        3
                        4)))
    9))

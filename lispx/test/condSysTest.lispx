(defSuite handlerBind

  (defClass TestError (Error) ())

  (defTest handlerBind.0
    (signalsError?
     (handlerBind)
     Error :type 'match :operands# +1 ))

  (defTest handlerBind.0b
    (handlerBind ())
    #inert )

  (defTest handlerBind.1
    (handlerBind ()
      1 2 (+ 1 2) )
    3 )

  (defTest handlerBind.2
    (handlerBind ((SimpleError (\ (e) 'whatever)))
      1 2 (+ 1 2) )
    3 )

  (defTest handlerBind.3
    (handlerBind ((SimpleError (\ (e) 'whatever))
                  (TestError (\ (e) 'whatever)))
      1 2 (+ 1 2) )
    3 )

  (defTest handlerBind.no-handler
    (handlerBind ((TestError (\ (e) 'whatever)))
      (signal (makeSimpleError "foo")) )
    #inert )

  (defTest handlerBind.unhandled
    (handlerBind ((SimpleError (\ (e) 'whatever)))
      (signal (makeSimpleError "foo")) )
    #inert )

  (defTest handlerBind.unhandled'
    (handlerBind (((Error :type 'simple @getMessage "foo") (\ (e) 'whatever)))
      (signal (new Error "foo" :type 'simple)) )
    #inert )

  (defTest handlerBind.decline
    (block b
      (handlerBind ((SimpleError (\ (e) (returnFrom b 1))))
        (handlerBind ((SimpleError (\ (e) 'decline)))
          (signal (makeSimpleError "foo")) )))
    1 )

  (defTest handlerBind.handled
    (block b
      (handlerBind ((SimpleError (\ (e) (assert#t (eq? "foo" (@getMessage e))) (returnFrom b 1))))
        (signal (makeSimpleError "foo")) ))
    1 )

  (defTest handlerBind.handled'
    (block b
      (handlerBind (((Error :type 'simple) (\ (e) (assert#t (eq? "foo" (@getMessage e))) (returnFrom b 1))))
        (signal (new Error "foo" :type 'simple)) ))
    1 )

  (defTest handlerBind.nested
    (block b
      (handlerBind ((SimpleError (\ (e) (returnFrom b 'outer))))
        (handlerBind ((SimpleError (\ (e) (returnFrom b 'inner))))
          (signal (makeSimpleError "foo")) )))
    'inner )

  (defTest handlerBind.resignal
    (block b
      (handlerBind ((SimpleError (\ (e) (returnFrom b 'outer))))
        (handlerBind ((SimpleError (\ (e) (signal e))))
          (signal (makeSimpleError "foo")) )))
    'outer )

  (defTest handlerBind.firewall
    (block b
      (handlerBind ((TestError (\ (e) (returnFrom b 'outer))))
        (handlerBind ((SimpleError (\ (e) (signal (new TestError)))))
          (handlerBind ((TestError (\ (e) (returnFrom b 'inner))))
            (signal (makeSimpleError "foo")) ))))
    'outer )

  (defTest handlerBind.firewall'
    (block b
      (handlerBind ((TestError (\ (e) (returnFrom b 'outer))))
        (handlerBind (((Error :type 'simple) (\ (e) (signal (new TestError)))))
          (handlerBind ((TestError (\ (e) (returnFrom b 'inner))))
            (signal (new Error "foo" :type 'simple)) ))))
    'outer )

  (defTest handlerBind.firewall''
    (block b
      (handlerBind (((Error :type 'test) (\ (e) (returnFrom b 'outer))))
        (handlerBind (((Error :type 'simple) (\ (e) (signal (new Error :type 'test)))))
          (handlerBind (((Error :type 'test) (\ (e) (returnFrom b 'inner))))
            (signal (new Error "foo" :type 'simple)) ))))
    'outer )

  (defTest handlerBind.multiple.1
    (block b
      (handlerBind 
        ( (TestError (\ (e) (returnFrom b 'test)))
          (SimpleError (\ (e) (returnFrom b 'simple))) )
        (signal (makeSimpleError "foo")) ))
    'simple )

  (defTest handlerBind.multiple.2
    (block b
      (handlerBind
        ( (TestError (\ (e) (returnFrom b 'test)))
          (SimpleError (\ (e) (returnFrom b 'simple))) )
        (signal (new TestError)) ))
    'test )

  (defTest handlerBind.anything
    (block b
      (handlerBind ((Object (\ (e) (returnFrom b e))))
        (signal "foo") ))
    "foo" ) )

(defSuite handlerCase

  (defClass TestError (Error) ())

  (defTest handlerCase.0
    (signalsError?
      (handlerCase)
      Error :type 'match :operands# +1 ))

  (defTest handlerCase.0b
    (handlerCase ())
    #inert )

  (defTest handlerCase.1
    (handlerCase ()
      1 2 (+ 1 2) )
    3 )

  (defTest handlerCase.2
    (handlerCase ((SimpleError (\ (e) 'whatever)))
      1 2 (+ 1 2) )
    3 )

  (defTest handlerCase.3
    (handlerCase
      ( (SimpleError (\ (e) 'whatever))
        (TestError (\ (e) 'whatever)) )
      1 2 (+ 1 2) )
    3 )

  (defTest handlerCase.no-handler
    (handlerCase ((TestError (\ (e) 'whatever)))
      (signal (makeSimpleError "foo")) )
    #inert )

  (defTest handlerCase.handled
    (handlerCase ((SimpleError (\ (e) (assert#t (eq? "foo" (@getMessage e))) 'whatever)))
      (signal (makeSimpleError "foo")) )
    'whatever )

  (defTest handlerCase.nested
    (handlerCase ((SimpleError (\ (e) 'outer)))
      (handlerCase ((SimpleError (\ (e) 'inner)))
        (signal (makeSimpleError "foo")) ))
    'inner )

  (defTest handlerCase.resignal
    (handlerCase ((SimpleError (\ (e) 'outer)))
      (handlerCase ((SimpleError (\ (e) (signal e))))
        (signal (makeSimpleError "foo")) ))
    'outer )

  (defTest handlerCase.multiple.1
    (handlerCase
      ( (TestError (\ (e) 'test))
        (SimpleError (\ (e) 'simple)) )
      (signal (makeSimpleError "foo")) )
    'simple )

  (defTest handlerCase.multiple.2
    (handlerCase
      ( (TestError (\ (e) 'test))
        (SimpleError (\ (e) 'simple)) )
      (signal (new TestError)) )
    'test )

  (defTest handlerCase.anything
    (handlerCase ((Object (\ (e) e)))
      (signal "foo") )
    "foo" ) )

(defSuite restartBind

  (defTest restartBind.0
    (signalsError?
     (restartBind)
     Error :type 'match :operands# +1) )

  (defTest restartBind.0b
    (restartBind ())
    #inert )

  (defTest restartBind.1
    (restartBind ()
      1 2 (+ 1 2) )
    3 )

  (defTest restartBind.2
    (restartBind ((continue (\ () 'whatever)))
      1 2 (+ 1 2) )
    3 )

  (defTest restartBind.3
    (restartBind
      ( (continue (\ () 'whatever))
        (abort (\ () 'whatever)) )
      1 2 (+ 1 2) )
    3 )

  (defTest restartBind.no-handler.1
    (signalsError?
      (invokeRestart 'continue)
      RestartError :restartName 'continue ))

  (defTest restartBind.no-handler.2
    (signalsError?
      (restartBind ((continue (\ () 'whatever)))
        (invokeRestart 'abort) )
    RestartError :restartName 'abort ))

  (defTest restartBind.no-handler.1a
    (signalsError?
      (invokeRestartInteractively 'continue)
      RestartError :restartName 'continue ))

  (defTest restartBind.no-handler.2a
    (signalsError?
     (restartBind ((continue (\ () 'whatever)))
       (invokeRestartInteractively 'abort) )
     RestartError :restartName 'abort ))

  (defTest restartBind.no-exit.1
    (restartBind ((continue (\ () 'whatever)))
      (invokeRestart 'continue) )
    'whatever )

  (defTest restartBind.no-exit.2
    (restartBind ((continue (\ () 'whatever)))
      (ifOpt (restartHandler (findRestart 'continue))
        (invokeRestart restartHandler)
        (assert#t #f) ))
    'whatever )

  (defTest restartBind.handled
    (block b
      (restartBind
        ( (abort
            (\ (arg1 arg2)
              (assert#t (eq? 1 arg1))
              (assert#t (eq? 2 arg2))
              (returnFrom b 3) )) )
        (invokeRestart 'abort (+ 0 1) (+ 1 1)) ))
    3 )

  (defTest restartBind.nested
    (block b
      (restartBind ((continue (\ () (returnFrom b 'outer))))
        (restartBind ((continue (\ () (returnFrom b 'inner))))
          (invokeRestart 'continue)) ))
    'inner )

  (defTest restartBind.reinvoke
    (block b
      (restartBind ((y (\ (val) (returnFrom b (+ val 1)))))
        (restartBind ((x (\ (val) (invokeRestart 'y (+ val 1)))))
          (invokeRestart 'x 1)) ))
    3 )

  (defTest restartBind.no-firewall
    (block b
      (restartBind ((r1 (\ () (returnFrom b 'outer))))
        (restartBind ((r2 (\ () (invokeRestart 'r1))))
          (restartBind ((r1 (\ () (returnFrom b 'inner))))
            (invokeRestart 'r2)) )))
    'inner )

  (defTest restartBind.multiple.1
    (block b
      (restartBind
        ( (r1 (\ (arg) (returnFrom b (- 100 arg))))
          (r2 (\ (arg) (returnFrom b (+ 100 arg)))) )
        (invokeRestart 'r2 1) ))
    101 )

  (defTest restartBind.multiple.2
    (block b
      (restartBind
        ( (r1 (\ (arg) (returnFrom b (- 100 arg))))
          (r2 (\ (arg) (returnFrom b (+ 100 arg)))) )
        (invokeRestart 'r1 1) ))
    99 ))

(defSuite restartCase

  (defTest restartCase.0
    (signalsError?
      (restartCase)
      Error :type 'match :operands# +1 ))

  (defTest restartCase.0b
    (restartCase ())
    #inert )

  (defTest restartCase.1
    (restartCase ()
      1 2 (+ 1 2) )
    3 )

  (defTest restartCase.2
    (restartCase ((continue (\ () 'whatever)))
      1 2 (+ 1 2) )
    3 )

  (defTest restartCase.3
    (restartCase
      ( (continue (\ () 'whatever))
        (abort (\ () 'whatever)) )
      1 2 (+ 1 2) )
    3 )

  (defTest restartCase.no-handler.1
    (signalsError?
      (invokeRestart 'continue)
      RestartError :restartName 'continue ))

  (defTest restartCase.no-handler.2
    (signalsError?
      (restartCase ((continue (\ () 'whatever)))
        (invokeRestart 'abort) )
      RestartError :restartName 'abort ))

  (defTest restartCase.no-exit.1
    (restartCase ((continue (\ () 'whatever)))
      (invokeRestart 'continue) )
    'whatever )

  (defTest restartCase.no-exit.2
    (restartCase ((continue (\ () 'whatever)))
      (ifOpt (restartHandler (findRestart 'continue))
        (invokeRestart restartHandler)
        (assert#t #f) ))
    'whatever )

  (defTest restartCase.handled
    (restartCase
      ( (abort
          (\ (arg1 arg2)
            (assert#t (eq? 1 arg1))
            (assert#t (eq? 2 arg2))
            3 )) )
      (invokeRestart 'abort (+ 0 1) (+ 1 1)) )
    3 )

  (defTest restartCase.nested
    (restartCase ((continue (\ () 'outer)))
      (restartCase ((continue (\ () 'inner)))
        (invokeRestart 'continue) ))
    'inner )

  (defTest restartCase.nested2
    (restartCase ((r1 (\ () 'outer)))
      (restartCase
        ( (r1 (\ () (invokeRestart 'r1)))
          (r2 (\ ())) )
        (invokeRestart 'r1) ))
    'outer )

  (defTest restartCase.reinvoke
    (restartCase ((y (\ (val) (+ val 1))))
      (restartCase ((x (\ (val) (invokeRestart 'y (+ val 1)))))
        (invokeRestart 'x 1) ))
    3 )

  (defTest restartCase.no-firewall
    (restartCase ((r1 (\ () 'outer)))
      (restartCase ((r2 (\ () (invokeRestart 'r1))))
        (restartCase ((r1 (\ () 'inner)))
          (invokeRestart 'r2) )))
    'outer )

  (defTest restartCase.parallel
    (restartCase ((r1 (\ () 'outer)))
      (restartCase
        ( (r1 (\ () 'inner))
          (r2 (\ () (invokeRestart 'r1))) )
        (invokeRestart 'r2) ))
    'outer )

  (defTest restartCase.multiple.1
    (restartCase
      ( (r1 (\ (arg) (- 100 arg)))
        (r2 (\ (arg) (+ 100 arg))) )
      (invokeRestart 'r2 1) )
    101 )

  (defTest restartCase.multiple.2
    (restartCase
      ( (r1 (\ (arg) (- 100 arg)))
        (r2 (\ (arg) (+ 100 arg))) )
      (invokeRestart 'r1 1) )
    99 ) )

(defSuite findRestart

  (defTest findRestart.0
    (signalsError?
      (findRestart)
      Error :type 'match :operands# +1 ))

  (defTest findRestart.1
    (findRestart 'foo)
    #null )

  (defTest findRestart.1b
    (restartBind ((bar (\ ())))
      (findRestart 'foo) )
    #null )

  (defTest findRestart.2
    (findRestart 'foo (makeSimpleError "foo"))
    #null )

  (defTest findRestart.3
    (block exit
      (restartBind ((x (\ (arg) (returnFrom exit (+ 1000 arg)))))
        (ifOpt (r (findRestart 'x))
          (begin
            (assert#t (eq? (getSlot r 'restartName) 'x))
            (assert#t (eq? (getSlot r 'associatedConditions) '()))
            (invokeRestart r 1) )
          (assert#t #f) )))
    1001 )

  (defTest findRestart.3b
    (restartCase ((x (\ (arg) (+ 1000 arg))))
      (ifOpt (r (findRestart 'x))
        (begin
          (assert#t (eq? (getSlot r 'restartName) 'x))
          (assert#t (eq? (getSlot r 'associatedConditions) '()))
          (invokeRestart r 1) )
        (assert#t #f) ))
    1001 )

  (defTest findRestart.4
    (block exit
      (def c (makeSimpleError "foo"))
      (restartBind ((x (\ (arg) (returnFrom exit (+ 1000 arg))) :associatedConditions (list c)))
        (ifOpt (r (findRestart 'x c))
          (begin
            (assert#t (eq? (getSlot r 'restartName) 'x))
            (assert#t (eq? (getSlot r 'associatedConditions) (list c)))
            (invokeRestart r 1) )
          (assert#t #f) )))
    1001 )

  (defTest findRestart.4b
    (begin
      (def c (makeSimpleError "foo"))
      (restartBind ((x (\ (arg) (+ 1000 arg)) :associatedConditions (list c)))
        (ifOpt (r (findRestart 'x c))
          (begin
            (assert#t (eq? (getSlot r 'restartName) 'x))
            (assert#t (eq? (getSlot r 'associatedConditions) (list c)))
            (invokeRestart r 1) )
          (assert#t #f) )))
    1001 )

  (defTest findRestart.5
    (block exit
      (def c (makeSimpleError "foo"))
      (restartBind ((x (\ (arg) (returnFrom exit (+ 1000 arg))) :associatedConditions (list c)))
        (restartBind ((x (\ (arg) (returnFrom exit (- 1000 arg)))))
          (ifOpt (r (findRestart 'x c))
            (invokeRestart r 1)
            (assert#t #f) ))))
    999 )

  (defTest findRestart.5b
    (begin
      (def c (makeSimpleError "foo"))
      (restartCase ((x (\ (arg) (+ 1000 arg)) :associatedConditions (list c)))
        (restartCase ((x (\ (arg) (- 1000 arg))))
          (ifOpt (r (findRestart 'x c))
            (invokeRestart r 1)
            (assert#t #f) ))))
    999 )

  (defTest findRestart.6
    (block exit
      (def c (makeSimpleError "foo"))
      (def d (makeSimpleError "bar"))
      (restartBind ((x (\ (arg) (returnFrom exit (+ 1000 arg))) :associatedConditions (list c)))
        (restartBind ((x (\ (arg) (returnFrom exit (- 1000 arg))) :associatedConditions (list d)))
          (ifOpt (r (findRestart 'x c))
            (invokeRestart r 1)
            (assert#t #f) ))))
    1001 )

  (defTest findRestart.6b
    (begin
      (def c (makeSimpleError "foo"))
      (def d (makeSimpleError "bar"))
      (restartCase ((x (\ (arg) (+ 1000 arg)) :associatedConditions (list c)))
        (restartCase ((x (\ (arg) (- 1000 arg)) :associatedConditions (list d)))
          (ifOpt (r (findRestart 'x c))
            (invokeRestart r 1)
            (assert#t #f) ))))
    1001 ) )

(defSuite computeRestarts

  (defTest computeRestarts.1
    (computeRestarts)
    '() )

  (def\ restart-names condition?
    (let ((restarts (apply computeRestarts condition?)))
      (map
        (\ (restart) (getSlot restart 'restartName))
        restarts )))

  (defTest computeRestarts.1
    (restartCase
      ( (outer1 (\ ()))
        (outer2 (\ ())) )
      (restartCase
        ( (middle1 (\ ()))
          (middle2 (\ ())) )
        (restartCase
          ( (inner1 (\ ()))
            (inner2 (\ ())) )
          (assert#t (eq? (restart-names) '(inner1 inner2 middle1 middle2 outer1 outer2)))
          #t ))))

  (defTest computeRestarts.2
    (begin
      (def c (makeSimpleError "foo"))
      (def d (makeSimpleError "bar"))
      (restartCase
        ( (outer1 (\ ()))
          (outer2 (\ ()) :associatedConditions (list c)) )
        (restartCase
          ( (middle1 (\ ()) :associatedConditions (list c))
            (middle2 (\ ())) )
          (restartCase
            ( (inner1 (\ ()) :associatedConditions (list c d))
              (inner2 (\ ())) )
            (assert#t (eq? (restart-names) '(inner1 inner2 middle1 middle2 outer1 outer2)))
            (assert#t (eq? (restart-names c) '(inner1 inner2 middle1 middle2 outer1 outer2)))
            (assert#t (eq? (restart-names d) '(inner1 inner2 middle2 outer1)))
            #t ))))) )

(defSuite signal

  (defTest signal.0
    (signalsError?
      (signal)
      Error :type 'match :operands# +1 ))

  (defTest signal.1
    (signal (makeSimpleError "foo"))
    #inert )

  (defTest signal.2
    (signalsError?
      (signal (new Obj :x 1 :y 2))
      Obj :x 1 :y 2 ))

  (defTest signal.3
    (handlerBind ((SimpleError (\ (e) (invokeRestart 'continue 12))))
      (signal (makeSimpleError "Foo!")
        (abort (\ (value) (* value 10)))
        (continue (\ (value) (* value 2))) ))
    24 )

  (defTest signal.3b
    (handlerBind ((SimpleError (\ (e) (invokeRestart 'abort 12))))
      (signal (makeSimpleError "Foo!")
        (abort (\ (value) (* value 10)))
        (continue (\ (value) (* value 2))) ))
    120 )

  (defTest signal.4
    (restartCase ((abort (\ (value) (* 1000 value))))
      (handlerBind ((SimpleError (\ (e) (invokeRestart 'abort 12))))
        ;; Silly?  Yeah, probably.
        (signal 
          (signal (makeSimpleError "Foo!"))
          (abort (\ (value) (* value 10)))
          (continue (\ (value) (* value 2))) )))
    12000 )

  (defTest signal.4b
    (block b
      (restartCase ((abort (\ (value) (* 1000 value))))
        (handlerBind ((SimpleError (\ (e) (invokeRestart 'abort 12))))
          (signal
            (signal (makeSimpleError "Foo!")
              (abort (\ (value) (returnFrom b (* 10000 value)))) )
            (abort (\ (value) (* value 10)))
            (continue (\ (value) (* value 2))) ))))
    120000 )

  ;;; Test that `signal' (and `error' likewise) associates the restarts it binds with the signalled error.
  (defTest signal.associations
    (doList (signalOperator (list signal error) #t)
      (block ok ; so that the test doesn't fail when testing `error'.
        (handlerBind
          ( (SimpleError
              (\ (e)
                (let*
                  ( (handler (optDft (findRestart 'r e)))
                    (aCn (getSlot handler 'associatedConditions)) )
                  (assert#t (member? e aCn))
                  (returnFrom ok) ))) )
          (signalOperator (makeSimpleError "error!")
            (r (\ () 1)) ))))))

(defSuite invokeRestart

  (defTest invokeRestart.0
    (signalsError?
      (invokeRestart)
      Error :type 'match :operands# +1 ))

  (defTest invokeRestart.1
    (signalsError?
      (invokeRestart "foo")
      Error :type 'type :datum "foo" :expected '(or Symbol RestartHandler) )) )

(defSuite invokeRestartInteractively

  (defTest invokeRestartInteractively.1
    (restartBind ((r1 (\ (arg1 arg2) (+ arg1 arg2)) :interactiveFunction (\ () (list 1 2))))
      (invokeRestartInteractively 'r1) )
    3 )

  (defTest invokeRestartInteractively.1a
    (restartBind ((r1 (\ (arg1 arg2) (+ arg1 arg2)) :interactiveFunction (\ () (list 1 2))))
      (invokeRestartInteractively (optDft (findRestart 'r1))) )
    3 )

  (defTest invokeRestartInteractively.1b
    (restartBind ((r1 (\ () (+ 1 2))))
      (invokeRestartInteractively 'r1) )
    3 )

  (defTest invokeRestartInteractively.1c
    (restartBind ((r1 (\ () (+ 1 2))))
      (invokeRestartInteractively (optDft (findRestart 'r1))) )
    3 )

  (defTest invokeRestartInteractively.2
    (signalsError?
     (restartBind ((r1 (\ (arg1 arg2) (+ arg1 arg2)) :interactiveFunction (\ () '())))
       (invokeRestartInteractively 'r1) )
     Error :type 'match :operands# +2 ))

  (defTest invokeRestartInteractively.3
    (signalsError?
     (restartBind ((r1 (\ (arg1) arg1) :interactiveFunction (\ () '(1 2))))
       (invokeRestartInteractively 'r1) )
     Error :type 'match :operands# -1 )) )

(defSuite \|Condition Handling in the Lisp Language Family|
  ;; Adapted from https://www.nhplace.com/kent/Papers/Condition-Handling-2001.html

  (defClass UnboundVariable (Error) (name))

  (defTest* firewall.1
    (let
      ( (result
          (handlerCase ((UnboundVariable (\ (c) (list 'outer c))))
            (handlerBind ((Error (\ (#ignore) (error (new UnboundVariable :name 'fred)))))
               (handlerCase ((UnboundVariable (\ (c) (list 'inner c))))
                 ;; Signal an arbitrary error:
                 (simpleError "Not an UNBOUND-VARIABLE error.") )))) )
      (assert#t
        (&& (== (car result) 'outer)
          (type? (cadr result) UnboundVariable)
          (== (getSlot (cadr result) 'name) 'fred) ))))

  (defTest* firewall.2
    (let
      ( (result
          (handlerCase ((UnboundVariable (\ (c) (list 'outer c))))
            (handlerBind ((Error (\ (#ignore) (error (new UnboundVariable :name 'fred)))))
              (handlerCase ((UnboundVariable (\ (c) (list 'inner c))))
                (error (new UnboundVariable :name 'marvin)) )))) )
      (assert#t
        (&& (== (car result) 'inner)
          (type? (cadr result) UnboundVariable)
          (== (getSlot (cadr result) 'name) 'marvin) )))) )

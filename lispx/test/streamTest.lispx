;;; Stream Tests

(defSuite stream-tests

  (defTest standard-streams-defined
    (&& (type? *standard-input* DVar)
        (type? *standard-output* DVar))))

(defSuite string-input-streams

  (defTest make-string-input-stream.1
    (type? (make-string-input-stream "foo") StringInputStream))

  (defTest make-string-input-stream.2
    (signalsError?
     (make-string-input-stream)
     match-error))

  (defTest make-string-input-stream.3
    (signalsError?
     (make-string-input-stream 12)
     type-error :datum 12 :expected 'String))

  (defTest with-standard-input-from-string.1
    (with-standard-input-from-string "foo")
    #inert)

  (defTest with-standard-input-from-string.2
    (with-standard-input-from-string "12" (read))
    12)

  (defTest with-standard-input-from-string.2
    (with-standard-input-from-string "12 #t" (list (read) (read)))
    (list 12 #t)))

(defSuite string-output-streams

  (defTest make-string-output-stream.1
    (type? (make-string-output-stream) StringOutputStream))

  (defTest with-standard-output-to-string.1
    (with-standard-output-to-string (print "foo") (print "bar"))
    "\n\"foo\"\n\"bar\"")

  (defTest with-standard-output-to-string.2
    (with-standard-output-to-string)
    "")

  (defTest get-output-stream-string.1
    (let ((s (make-string-output-stream)))
      (get-output-stream-string s))
    "")

  (defTest get-output-stream-string.2
    (signalsError?
     (get-output-stream-string)
     match-error))

  (defTest get-output-stream-string.3
    (signalsError?
     (get-output-stream-string 1)
     type-error :datum 1 :expected 'StringOutputStream)))

(defSuite fresh-line

  (defTest fresh-line.1
    (with-standard-output-to-string (fresh-line) (uprint1 "a") (fresh-line))
    "\na\n")

  (defTest fresh-line.2
    (let ((sos (make-string-output-stream)))
      (with-standard-output-to-string
       (fresh-line) (uprint1 "a") (fresh-line)
       (fresh-line sos) (dlet ((*standard-output* sos)) (uprint1 "b")) (fresh-line sos)
       (assert#t (eq? "\nb\n" (get-output-stream-string sos)))))
    "\na\n"))

;;; LispX Printer Tests

(defSuite *print-escape*

  (defTest *print-escape*.defined
    (&& (type? *print-escape* DVar)
        (type? (dget *print-escape*) Boolean))))

(defSuite *print-level*

  (defTest *print-level*.defined
    (&& (type? *print-level* DVar)
        (type? (dget *print-level*) List)))

  (def\ write-with-level (object level)
    (dlet ((*print-level* (some level)))
      (with-standard-output-to-string (write object))))

  (defTest *print-level*.cons
    (begin
      (def a '(1 (2 (3 (4 (5 (6)))))))
      (assert#t (eq? "#" (write-with-level a 0)))
      (assert#t (eq? "(1 #)" (write-with-level a 1)))
      (assert#t (eq? "(1 (2 #))" (write-with-level a 2)))
      (assert#t (eq? "(1 (2 (3 #)))" (write-with-level a 3)))
      (assert#t (eq? "(1 (2 (3 (4 #))))" (write-with-level a 4)))
      (assert#t (eq? "(1 (2 (3 (4 (5 #)))))" (write-with-level a 5)))
      (assert#t (eq? "(1 (2 (3 (4 (5 (6))))))" (write-with-level a 6)))
      (assert#t (eq? "(1 (2 (3 (4 (5 (6))))))" (write-with-level a 7)))
      #t))

  (defTest *print-level*.standard-object
    (begin
      (defClass a () (slot))
      (def\ make-a (slot) (new A :slot slot))
      (def a (make-a (make-a (make-a 12))))
      (assert#t (eq? "#" (write-with-level a 0)))
      (assert#t (eq? "#<a :slot #>" (write-with-level a 1)))
      (assert#t (eq? "#<a :slot #<a :slot #>>" (write-with-level a 2)))
      (assert#t (eq? "#<a :slot #<a :slot #<a :slot 12>>>" (write-with-level a 3)))
      (assert#t (eq? "#<a :slot #<a :slot #<a :slot 12>>>" (write-with-level a 4)))
      #t)))

(defSuite write

  (defTest write.1
    (with-standard-output-to-string (write 1) (write 2))
    "12")

  (defTest write.1a
    (with-standard-output-to-string
      (assert#t (eq? 1 (write 1))))
    "1")

  (defTest write.2
    (signalsError?
     (write)
     match-error))

  (defTest write.3
    (let ((s1 (make-string-output-stream))
          (s2 (make-string-output-stream)))
      (write 1 :stream s1)
      (write 2 :stream s2)
      (&& (eq? "1" (get-output-stream-string s1))
          (eq? "2" (get-output-stream-string s2)))))

  (defTest write.4a
    (signalsError?
     (write "foo" :stream)
     match-error))

  (defTest write.4b
    (signalsError?
     (write "foo" :stream 12)
     type-error :datum 12 :expected 'OutputStream)))

(defSuite write-to-string

  (defTest write-to-string.1
    (write-to-string 12)
    "12")

  (defTest write-to-string.2
    (write-to-string "foo")
    "\"foo\"")

  (defTest write-to-string.3
    (signalsError?
     (write-to-string)
     match-error)))

(defSuite print

  (defTest print.1
    (with-standard-output-to-string (print "foo"))
    "\n\"foo\"")

  (defTest print.1a
    (with-standard-output-to-string
      (assert#t (eq? "foo" (print "foo"))))
    "\n\"foo\"")

  (defTest print.2
    (with-standard-output-to-string (print "foo") (print "bar"))
    "\n\"foo\"\n\"bar\"")

  (defTest print.3
    (signalsError?
     (print)
     match-error))

  (defTest print1.1
    (with-standard-output-to-string (print "foo") (print1 "bar"))
    "\n\"foo\"\"bar\"")

  (defTest print1.1a
    (with-standard-output-to-string
      (assert#t (eq? "foo" (print1 "foo"))))
    "\"foo\"")

  (defTest print1.2
    (with-standard-output-to-string (print1 "foo") (print1 "bar"))
    "\"foo\"\"bar\"")

  (defTest print1.3
    (signalsError?
     (print1)
     match-error))

  (defTest uprint.1
    (with-standard-output-to-string (uprint "foo"))
    "\nfoo")

  (defTest uprint.1a
    (with-standard-output-to-string
      (assert#t (eq? "foo" (uprint "foo"))))
    "\nfoo")

  (defTest uprint.2
    (with-standard-output-to-string (uprint "foo") (uprint "bar"))
    "\nfoo\nbar")

  (defTest uprint.3
    (signalsError?
     (uprint)
     match-error))

  (defTest uprint1.1
    (with-standard-output-to-string (uprint "foo") (uprint1 "bar"))
    "\nfoobar")

  (defTest uprint1.1a
    (with-standard-output-to-string
      (assert#t (eq? "foo" (uprint1 "foo"))))
    "foo")

  (defTest uprint1.2
    (signalsError?
     (uprint1)
     match-error))

  (defTest uprint1.3
    (with-standard-output-to-string (uprint1 "foo") (uprint1 "bar"))
    "foobar"))

; sostituzioni nei .lispx
; #^ -> ''
; #' -> ''
; #void -> #inert
; #nil -> #null

; boot.lispx
; commentate stringhe in eccesso nelle (%def name expr "..."), troppi parametri per la %def!

(%resetEnv)

(%def milli (@currentTimeMillis &java.lang.System))

(@clear (.methods vm))
(prTrc 0)
(bndRes #inert)
(boxDft #inert)
(aQuote #t)
(typeT 0)
(hdlAny #t)

(%def Null #null)
(%def Any &Wat.Vm$Any)
(%def Apv &Wat.Vm$Apv)
(%def Array &java.lang.reflect.Array)
(%def At &Wat.Vm$At)
(%def AtDot &Wat.Vm$AtDot)
(%def BiConsumer &java.util.function.BiConsumer)
(%def Box &Wat.Vm$Box)
(%def Boolean &java.lang.Boolean)
(%def Class &java.lang.Class)
(%def Class[] &java.lang.Class[])
(%def Combinable &Wat.Vm$Combinable)
(%def Condition &Wat.Vm$Condition)
(%def Cons &Wat.Vm$Cons)
(%def Date &java.util.Date)
(%def Dot &Wat.Vm$Dot)
(%def Double &java.lang.Double)
(%def DVar &Wat.Vm$DVar)
(%def Env &Wat.Vm$Env)
(%def Error &Wat.Vm$Error)
(%def Function &java.util.function.Function)
(%def Ignore &Wat.Vm$Ignore)
(%def Inert &Wat.Vm$Inert)
(%def Intern &Wat.Vm$Intern)
(%def Integer &java.lang.Integer)
(%def Keyword &Wat.Vm$Keyword)
(%def JFun &Wat.Vm$JFun)
(%def List &Wat.Vm$List)
(%def Long &java.lang.Long)
(%def Math &java.lang.Math)
(%def Number &java.lang.Number)
(%def Object &java.lang.Object)
(%def Opv &Wat.Vm$Opv)
(%def Keyword &Wat.Vm$Keyword)
(%def Obj &Wat.Vm$Obj)
(%def ObjEnv &Wat.Vm$ObjEnv)
(%def Object &java.lang.Object)
(%def Object[] &java.lang.Object[])
(%def Opv &Wat.Vm$Opv)
(%def Symbol &Wat.Vm$Symbol)
(%def System &java.lang.System)
(%def String &java.lang.String)
(%def Throwable &java.lang.Throwable)
(%def Utility &Wat.Utility)
(%def Vm &Wat.Vm)
(%def Parser &List.Parser)
(%def PTree &Wat.Vm$PTree)

(%def %0? (%\ (v) (%== v 0)))
(%def %inert? (%\ (v) (%== v #inert)))
(%def %ignore? (%\ (v) (%== v #ignore)))

(%def %nth
  (%\ ([#! (and Integer (>= 0)) i] [#! (or () Cons) lst])
    (%if (%cons? lst) (@car lst i)
      (error (%new Error "cannot get car" :type 'outOfBounds))) ))
(%def %nthCdr
  (%\ ([#! (and Integer (>= 0)) i] [#! (or () Cons) lst])
    (%if (%0? i) lst
      (%if (%cons? lst) (@cdr lst (%- i 1))
        (error (%new Error "cannot get cdr" :type 'outOfBounds)) ))))
(%def %take
  (%\ ([#! (and Integer (>= 0)) i] [#! (or () Cons) lst])
    (%if (%0? i) #null
      (%if (%cons? lst) (%cons (%car lst) (%take (%- i 1) (%cdr lst)))
        (error (%new Error "cannot take" :type 'outOfBounds)) ))))
(%def %subList
  (%\ ([#! (or () Cons) lst] [#! (and Integer (>= 0)) start] . [#! (or () (1 (and Integer (>= 0)))) end])
    (%def tail (%nthCdr start lst))
    (%if (%null? end) tail
      (%take (%- (car end) start) tail) )))    
(%def %subString
  (%\ ([#! String str] [#! (and Integer (>= 0)) start] . [#! (or () (1 (and Integer (>= 0)))) end])
    (handlerBind 
      ( ((Error :type 'java)
         (%\ (thw)
           (error
             (%if (%type? (@getCause thw) &java.lang.StringIndexOutOfBoundsException)
               (%new Error "cannot subString" thw :type 'outOfBounds)
               thw )))) )
      (%apply** @substring str start end) )))


;(%def %pushPrompt ((%\ (%pushPrompt) (%wrap %pushPrompt)) %pushPrompt))

(%def %className (%\ ((#! Class class)) (%intern (@getSimpleName class))))
;(%def %newClass ((%\ (%newClass) (%\ (name superclass) (%newClass (%intern (@capitalize Utility (@camelize Utility (%$ "" name) "-"))) superclass))) %newClass))

(%def %getSlot (%\ ((#! ObjEnv obj) (#! Intern slot)) (obj slot)))
(%def %setSlot (%\ ((#! ObjEnv obj) (#! Intern slot) value) (obj slot value)))
(%def %slotBound? (%\ ((#! ObjEnv obj) (#! Intern slot)) (%bound? slot obj)))


(%def %mkCheckEval
  (%\ (check)
    (%vau (o ck) env
      (%def %=*
        (%vau (key . lst) env
          (%def key (%eval key env))
          ( (%def loop :rhs (%\ (lst) (%if (%null? lst) #f (%== (%car lst) key) #t (loop (%cdr lst)) ) )) lst) ))
      (%def evl
        (%\ (ck)
          (%if
            (%== ck 'oo) (.MAX_VALUE &java.lang.Integer)
            (%! (%cons? ck)) (%eval ck env)
            ( (%\ (ckcar)
                (%if
                  (%== ckcar 'or) (%list->array (evm (%cdr ck)))
                  (%== ckcar 'and) (cons 'and (evm (%cdr ck)))
                  (%=* ckcar %' quote) (%cadr ck)
                  ( (%\ (evckcar)
                      (%if (%type? evckcar Apv)
                        (%cons evckcar (%cons ckcar (%eval (%list* '%list (%cdr ck)) env)))
                        (%cons (evl ckcar) (evm (%cdr ck))) ))
                    (%eval ckcar env) ) ))
              (%car ck) ) )))
      (%def evm (%\ (lst) (%if (%null? lst) #null (%cons (evl (%car lst)) (evm (%cdr lst))))))
      (check o (evl ck)) )))

(%def %check (%mkCheckEval %check))
(%def %checkO (%mkCheckEval %checkO))


;;; Boot

(load "lispx/src/boot.lispx")
(load "lispx/src/condSys.lispx") ; define _error_ (call invokeDebugger) and error!

(defClass SimpleError (Error)
  #|Class for simple errors with a MESSAGE.
   |
   |$(type class extends Error)
   |#
  (message) )

(def\ makeSimpleError (message)
  #|Create a new simple error with a MESSAGE.
   |
   |$(fn message)
   |$(type function)
   |#
  (new SimpleError message :type 'simple) )

(def\ simpleError (message)
  #|Signal a simple error with a MESSAGE.
   |
   |$(fn message)
   |$(type function)
   |#
  (error (makeSimpleError message)) )


;;;; User error break routine, called to print stacktrace and throw or debug

(def userBreak
  #|Define userBreak function invocked from Vm when signals an error
   |#
  error )

(def invokeDebugger
  #|Define the InvokeDebugger function invoked from _error_ when signals an error.
   |Ad default just prints a stack trace and panics, thereby throwing an exception to Java.
   |When running in the REPL, it is replaced with a different one that runs a nested debug loop.
   |#
  printStacktrace )

;(load "lispx/src/stream.lispx")
;(load "lispx/src/read.lispx")
;(load "lispx/src/print.lispx")
;(load "lispx/src/js.lispx")


;;;; Test Util

; lasciare commentati, bastano le successive definizioni
;(load "lispx/test/testUtil.lispx") ;
;(load "lispx/test/testUtilTest.lispx")

(defMacro defTest (name expression . expected?)
  (list* 'test name expression (if (null? expected?) '(#t) expected?)))

(defMacro defTest* (name . forms)
  (list defTest name (list* prog1 #t forms)) )

(defVau defSuite (name . forms) env
  (apply begin forms env) )

(defVau signalsError? (form class . slots) env
  (block exit
    (handlerCase
      ( (Object (\ (object) (exit (matchType? object (eval (list* 'list class slots) env))) )) )
      (eval form env) )
    #f ))


;;;; Test

(load "lispx/test/bootTest.lispx")
(load "lispx/test/condSysTest.lispx")
(load "lispx/test/delimccTest.lispx")
(load "lispx/test/controlTest.lispx")

;(load "lispx/test/streamTest.lispx")
;(load "lispx/test/readTest.lispx")
;(load "lispx/test/printTest.lispx")
;(load "lispx/test/jsTest.lispx")
;(load "lispx/test/hierarchyTest.lispx")

(load "lispx/tool/repl/repl.lispx") ; redefine invokeDebugger

#|
(debugger #t)
x
(invokeRestart 'abort)
(+ 100 x)
(invokeRestart 'useValue 42)
(debugger #f)
(assert x Error :type 'unboundSymbol :symbol 'x)
|#

(%def milli (%- (@currentTimeMillis &java.lang.System) milli))
(%$ "vm started in " (%$ milli "ms"))
; sostituzioni nei .lispx
; #^ -> ''
; #' -> ''
; #void -> #inert
; #nil -> #null

; boot.lispx
; commentate stringhe in eccesso nelle (%def name expr "..."), troppi parametri per la %def!

(%resetEnv)

(%def milli (@currentTimeMillis &java.lang.System))

(@clear (.methods vm))
(ctApv #f)
(prTrc 0)
(bndRes 0)
(boxDft #inert)
(aQuote #t)
(typeT 0)
(hdlAny #t)

(%def Null #null)
(%def Any &Wat.Vm$Any)
(%def Apv &Wat.Vm$Apv)
(%def At &Wat.Vm$At)
(%def AtDot &Wat.Vm$AtDot)
(%def Box &Wat.Vm$Box)
(%def Boolean &java.lang.Boolean)
(%def Class &java.lang.Class)
(%def Combinable &Wat.Vm$Combinable)
(%def Condition &Wat.Vm$Condition)
(%def Cons &Wat.Vm$Cons)
(%def Date &java.util.Date)
(%def Dot &Wat.Vm$Dot)
(%def Double &java.lang.Double)
(%def DVar &Wat.Vm$DVar)
(%def Env &Wat.Vm$Env)
(%def Error &Wat.Vm$Error)
(%def Ignore &Wat.Vm$Ignore)
(%def Inert &Wat.Vm$Inert)
(%def Intern &Wat.Vm$Intern)
(%def Integer &java.lang.Integer)
(%def Keyword &Wat.Vm$Keyword)
(%def JFun &Wat.Vm$JFun)
(%def List &Wat.Vm$List)
(%def Math &java.lang.Math)
(%def Number &java.lang.Number)
(%def Object &java.lang.Object)
(%def Opv &Wat.Vm$Opv)
(%def Keyword &Wat.Vm$Keyword)
(%def Obj &Wat.Vm$Obj)
(%def Object &java.lang.Object)
(%def Opv &Wat.Vm$Opv)
(%def Symbol &Wat.Vm$Symbol)
(%def System &java.lang.System)
(%def String &java.lang.String)
(%def Throwable &java.lang.Throwable)
(%def Inert &Wat.Vm$Inert)
(%def Ignore &Wat.Vm$Ignore)
(%def Utility &Wat.Utility)
(%def Vm &Wat.Vm)
(%def Parser &List.Parser)
(%def PTree &Wat.Vm$PTree)

(%def Fexpr Opv)
(%def Function Apv)
(%def Operator Combinable)
(%def StandardClass Class)

(%def %zero? (%\ (v) (%== v 0)))
(%def %inert? (%\ (v) (%== v #inert)))
(%def %ignore? (%\ (v) (%== v #ignore)))

(%def %nth
  (%\ ([#! (and Integer (>= 0)) i] [#! (or () Cons) lst])
    (%if (%!null? lst) (@car lst i)
      (error (%new Error "cannot get car" :type 'outOfBounds))) ))
(%def %nthCdr
  (%\ ([#! (and Integer (>= 0)) i] [#! (or () Cons) lst])
    (%if (%zero? i) lst
      (%if (%!null? lst) (@cdr lst (%- i 1))
        (error (%new Error "cannot get cdr" :type 'outOfBounds)) ))))
(%def %take
  (%\ ([#! (and Integer (>= 0)) i] [#! (or () Cons) lst])
    (%if (%zero? i) #null
      (%if (%cons? lst) (%cons (%car lst) (%take (%- i 1) (%cdr lst)))
        (error (%new Error "cannot take" :type 'outOfBounds)) ))))
(%def %subList
  (%\ ([#! (or () Cons) lst] [#! (and Integer (>= 0)) start] . [#! (or () (1 (and Integer (>= 0)))) end])
    (%def tail (%nthCdr start lst))
    (%if (%null? end) tail
      (%take (%- (car end) start) tail) )))    
(%def %subString
  (%\ ([#! String str] [#! (and Integer (>= 0)) start] . [#! (or () (1 (and Integer (>= 0)))) end])
    (handlerBind 
      ( ((Error :type 'java)
         (\ (thw)
           (error
             (if (type? (@getCause thw) &java.lang.StringIndexOutOfBoundsException)
               (new Error "cannot subString" thw :type 'outOfBounds)
               thw )))) )
      (apply** @substring str start end)) ))


;(%def %pushPrompt ((%\ (%pushPrompt) (%wrap %pushPrompt)) %pushPrompt))

(%def %className (%\ (class) (%intern (@getSimpleName (%the Class class)))))
;(%def %newClass ((%\ (%newClass) (%\ (name superclass) (%newClass (%intern (@capitalize Utility (@camelize Utility (%$ "" name) "-"))) superclass))) %newClass))

(%def %getSlot (%\ (obj slot) ((%the Obj obj) (%the Intern slot)) ))
(%def %setSlot (%\ (obj slot value) ((%the Obj obj) (%the Intern slot) value) ))
(%def %slotBound? (%\ (obj slot) (@isBound (%the Obj obj) (%the Intern slot)) ))

(%def %makeCheckEvl
  (%\ (check)
    (%def %=*
      (%vau (key . lst) env
        (%def key (%eval key env))
        ((%def loop :rhs (%\ (lst) (%if (%null? lst) #f (%if (%== (%car lst) key) #t (loop (%cdr lst)))))) lst)) )
    (%vau (o ck) env
      (%def evl
        (%\ (ck)
          (%if (%== ck '+) (.MAX_VALUE Integer)
            (%if (%! (%cons? ck)) (%eval ck env)
            ( (%\ (ckcar)
                (%if (%== ckcar 'or) (%list->array (evl (%cdr ck)))
                  (%if (%=* ckcar %' quote) (%cadr ck)
                    (%if (%=* ckcar < <= >= >) (%cons ckcar (%cons (%eval ckcar env) (evl (%cdr ck))))
                      (%if (%== ckcar 'and) (cons 'and (evl (%cdr ck)))
                        (evm ck) )))))
              (%car ck) ) ))))
      (%def evm (%\ (lst) (%if (%null? lst) #null (%cons (evl (%car lst)) (evm (%cdr lst))))))
      (check o (evl ck)) )))

(%def %check (%makeCheckEvl %check))
(%def %checkO (%makeCheckEvl %checkO))


;;; Boot

(load "lispx/src/boot.lispx")
(load "lispx/src/cond-sys.lispx") ; define error!

(def userBreak error)

;(load "lispx/src/stream.lispx")
;(load "lispx/src/read.lispx")
;(load "lispx/src/print.lispx")
;(load "lispx/src/js.lispx")


;;;; Test

; lasciare commentati, bastano le successive definizioni
;(load "lispx/test/test-util.lispx")
;(load "lispx/test/test-util-test.lispx")

(defMacro deftest (name expression . expected?)
  (list* '%test name expression (if (null? expected?) '(#t) expected?)))

(defMacro deftest* (name . forms)
  (list deftest name (list* prog1 #t forms)) )

(defVau defsuite (name . forms) env
  (eval (cons 'begin forms) env) )

(defVau signalsError? (form class . slots) env
  (block exit
    (handlerCase
      ( (Object (\ (object) (exit (matchObj? object (eval (list* 'list class slots) env))) )) )
      (eval form env) )
    #f ))

(load "lispx/test/boot-test.lispx")
(load "lispx/test/cond-sys-test.lispx")
(load "lispx/test/delimcc-test.lispx")
(load "lispx/test/control-test.lispx")

;(load "lispx/test/stream-test.lispx")
;(load "lispx/test/read-test.lispx")
;(load "lispx/test/print-test.lispx")
;(load "lispx/test/js-test.lispx")
;(load "lispx/test/hierarchy-test.lispx")


#|
(load "lispx/tool/repl/repl.lispx")
(def uprint print)
(repl:run)
x
(invokeRestart 'abort)
(+ 100 x)
(invokeRestart 'useValue 42)
|#

(%def milli (%- (@currentTimeMillis &java.lang.System) milli))
(%$ "vm started in " (%$ milli "ms"))
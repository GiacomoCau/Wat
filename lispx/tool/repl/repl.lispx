;;;                                                     -*- Lisp -*-
;;; LispX REPL
;;;

(defConstant repl:env
  #|The environment in which REPL expressions are evaluated.
   |#
   (theEnv))

(def repl:prStk
  #|The repl print stack flag.
   |#
   #f)

(ddef repl:debugLevel
  #|Current debug level. 0 if we are not in the debug.
   |#
  0)

(def\ (debug b)
  #|Activate and deactivate the debug.
   |#
  (if b
    (then
      (set repl:env (invokeDebugger- invokeDebugger) (list invokeDebugger invokeDebugger+))
      (log "repl:run started!")
      (repl:run) )
    (else
      (set repl:env invokeDebugger invokeDebugger-)
      (log "repl:run ended!")
      (invokeRestart 'replEnd) )))

(def\ repl:run ()
  #|Run a REPL.
   |#
  (restartCase ((replEnd (\ () #| nothing to do here, just return |#) ))  
    (loop
      ;; The internal REPL-ABORT restart causes the loop to begin from the start again.
      ;; The user actually uses ABORT, described below.
      (restartCase ((replAbort (\ () #| nothing to do here, just unwind |#)))
        (print (eval (read (dget repl:debugLevel)) repl:env)) ))))

#| TODO in alternativa al precedente
(def\ repl:run ()
  #|Run a REPL.
   |#
  (catchTagWth 'replEnd #inert  
    (loop
      ;; The internal REPL-ABORT restart causes the loop to begin from the start again.
      ;; The user actually uses ABORT, described below.
      (restartCase ( (replAbort (\ () #| nothing to do here, just unwind |#))
                     (replEnd (\ () (throwTag 'replEnd) )) )
        (print (eval (read (dget repl:debugLevel)) repl:env)) ))))
|#

(def\ repl:runDebuggerLoop (condition k)
  #|Run a debug REPL.
   |Prints a banner and then runs a normal REPL.
   |#
  (print "Debugger invoked on condition:")
  (print "    " condition)
  (print "\nAvailable restarts -- use (invokeRestart 'name ...) to invoke:")
  (forEach
    (\ (restart)
      (case (getSlot restart 'restartName)
        ((replAbort replEnd) #|Don't print our internal REPL-ABORT restart|#)
        (else => (\ (restartName) (print "    " restartName))) ))
    (computeRestarts condition) )
  (when repl:prStk
    (print "Backtrace:")
    (printFrames k) )
  (repl:run))

;; Overwrite built-in `invokeDebugger'.
;; This gets called for all unhandled conditions.
(def\ invokeDebugger+ (condition)
  ;; Immediately grab the stack trace,
  ;; so we don't include any of the below frames in it.
  (takeSubcont rootPrompt k
    (pushDelimSubcont rootPrompt k
      ;; Increase debug level.
      (dlet1 (repl:debugLevel (1+ (dget repl:debugLevel)))
        ;; We use a system of two restarts to abort.
        ;; The user invokes the ABORT restart to break out of a nested debug level.
        ;; Internally this invokes the REPL-ABORT restart which lands
        ;; us back in the containing REPL, see `repl:run'.
        ;; This two-restart approach is needed because otherwise REPL-ABORT
        ;; would land the user back in the debug loop they came from.
        ;; Maybe there's a simpler solution but I haven't found one.
        (restartCase ((abort (\ () (invokeRestart 'replAbort))))
          ;; Add some extra restarts to `UnboundSymbolError' because
          ;; it demos well and makes designers of other languages
          ;; squirt blood from their eyes.
          (caseType condition
            ( (Error :type 'unboundSymbol)
                (let ( (symbol (getSlot condition 'symbol))
                       (env (getSlot condition 'env)) )
                  (restartCase 
                    ( (useValue (\ (value) value) :associatedConditions (list condition))
                      (continue (\ () (eval symbol env)) :associatedConditions (list condition))
                      (storeValue (\ (value) (eval (list 'def symbol value) env)) :associatedConditions (list condition)) )
                    (repl:runDebuggerLoop condition k) )) )
            ( (Error :type 'type :operands List)
                (let ( (operands (getSlot condition 'operands)) )
                  (restartCase 
                    ( (setOperand (\ (index value) (setCar (nthCdr index operands) value) value) :associatedConditions (list condition)) )
                    (repl:runDebuggerLoop condition k) )) )
            #|
            ( (Error :type 'match)
                (log condition) 
                  (restartCase 
                    ( (useValue (\ (value) value) :associatedConditions (list condition)) )
                    (repl:runDebuggerLoop condition k) ) )
            |#
            (else
               (repl:runDebuggerLoop condition k) ) ))))))


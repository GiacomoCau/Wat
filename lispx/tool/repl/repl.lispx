;;;                                                     -*- Lisp -*-
;;; LispX REPL
;;;

(defConstant repl:env
  #|The environment in which REPL expressions are evaluated.
   |#
   (theEnv))

(ddef repl:debugLevel
  #|Current debug level.  0 if we are not in the debugger.
   |#
  0)

(def\ repl:run ()
  #|Run a REPL.
   |#
  (loop
    ;; The internal REPL-ABORT restart causes the loop to begin from the start again.
    ;; The user actually uses ABORT, described below.
    (restartCase ((replAbort (\ () #| nothing to do here, just unwind |#)))
      (print (eval (read (dget repl:debugLevel)) repl:env)) )))

(def\ repl:runDebuggerLoop (condition k)
  #|Run a debug REPL.
   |Prints a banner and then runs a normal REPL.
   |#
  (uprint "Debugger invoked on condition:")
  (print "    " condition)
  (uprint "\nAvailable restarts -- use (invokeRestart 'name ...) to invoke:")
  (forEach (\ (restart)
          ;; Don't print our internal REPL-ABORT restart.
          (unless (== (getSlot restart 'restartName) 'replAbort)
            (print "    " (getSlot restart 'restartName))))
        (computeRestarts condition))
  (when (prStk)
    (uprint "Backtrace:")
    (%printStacktrace k) )
  (repl:run))

;; Overwrite built-in `invokeDebugger'.
;; This gets called for all unhandled conditions.
(def\ invokeDebugger (condition)
  ;; Immediately grab the stack trace,
  ;; so we don't include any of the below frames in it.
  (takeSubcont rootPrompt k
    (pushDelimSubcont rootPrompt k
      ;; Increase debug level.
      (dlet ((repl:debugLevel (+ (dget repl:debugLevel) 1)))
        ;(log 1 (dget repl:debugLevel))
        ;; We use a system of two restarts to abort.
        ;; The user invokes the ABORT restart to break out of a nested debug level.
        ;; Internally this invokes the REPL-ABORT restart which lands
        ;; us back in the containing REPL, see `repl:run'.
        ;; This two-restart approach is needed because otherwise REPL-ABORT
        ;; would land the user back in the debug loop they came from.
        ;; Maybe there's a simpler solution but I haven't found one.
        (restartCase ((abort (\ () (invokeRestart 'replAbort))))
          ;; Add some extra restarts to `UnboundSymbolError' because
          ;; it demos well and makes designers of other languages
          ;; squirt blood from their eyes.
          (caseType condition
            ( (Error :type 'unboundSymbol)
                (let ( (symbol (getSlot condition 'symbol))
                       (env (getSlot condition 'environment)) )
                  (restartCase 
                    ( (useValue (\ (value) value) :associatedConditions (list condition))
                      (continue (\ () (eval symbol env)) :associatedConditions (list condition))
                      (storeValue (\ (value) (eval (list 'def symbol value) env)) :associatedConditions (list condition)) )
                    (repl:runDebuggerLoop condition k) )))
            (else
               (repl:runDebuggerLoop condition k) ) ))))))

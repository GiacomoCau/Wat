;;;                                                     -*- Lisp -*-
;;; LispX Condition System
;;;

;;; Copyright (c) 2021, 2022 Manuel J. Simoni

#|! LispX Condition System
 |This file implements a condition system in the style of Common Lisp.
 |
 |Implementation Notes
 |--------------------
 |
 |Condition handling and restart handling share some similarities
 |while also being quite different in other respects.
 |
 |The main similarities between condition and restart handling are:
 |
 |* Both condition and restart handlers are arranged in
 |  dynamically-bound handler chains, consisting of individual
 |  handler frames.  Each frame binds a number of handlers.  We use
 |  two dynamic variables, `*conditionHandlerFrame*' and
 |  `*restartHandlerFrame*', to point at the innermost frame of
 |  each chain.  Note that the variables hold options, as indicated
 |  by the question mark.
 |
 |* Signalling a condition and invoking a restart are very similar
 |  operations, in that a handler is looked up in the chain, and
 |  then its handler function is invoked.
 |
 |The main differences:
 |
 |* Conditions are classes organized in a type hierarchy
 |  (e.g. `type-error' as subtype of `error'), whereas restarts are
 |  plain names (e.g. `abort' and `continue').
 |
 |* A condition handler function always receives only a single
 |  argument, the condition, whereas a restart handler function
 |  receives any number of arguments passed to `invokeRestart'.
 |
 |* A condition handler function may decline handling a condition by
 |  returning normally instead of performing a nonlocal exit; this
 |  causes the search for a handler to continue.  In contrast, if a
 |  restart handler function returns normally, the restart is
 |  considered handled, and its result value is returned from
 |  `invokeRestart'.
 |
 |* A restart handler may optionally have an interactive function
 |  that prompts the user for arguments when the restart is invoked
 |  by `invokeRestartInteractively'.
 |
 |* A restart handler may optionally be associated with a list of
 |  conditions, to tell apart restarts belonging to different,
 |  concurrently signalled conditions.
 |
 |We follow the Common Lisp condition system quite closely (including
 |details like the condition firewall), with some minor differences:
 |
 |1) For simplicity, the syntaxes of `handlerCase' and
 |   `restartCase' are equal to the syntaxes of the lower-level
 |   `handlerBind' and `restartBind' functions.  There is no extra
 |   "user interface" processing for the higher-level functions.
 |
 |   Likewise, `signal' and `error' do not support creating simple
 |   conditions from formatting strings and arguments, you must
 |   always pass in a fully formed condition yourself.
 |
 |2) There is no `with-condition-restarts'.  Instead there is an
 |   additional keyword, `:associatedConditions', in the
 |   handlerSpecs of `restartBind' and `restartCase' that
 |   establishes the associations.
 |
 |   Alternatively, `signal' and `error' also support the
 |   establishment of restart handlers associated with the signalled
 |   condition.
 |
 |   A call to `signal' (or `error') with restart handler specs like:
 |
 |   (signal some-condition
 |     (continue (\ () ...)) )
 |
 |   is equivalent to:
 |
 |   (restartCase ( (continue (\ () ...) :associatedConditions (list some-condition)) )
 |     (signal some-condition) )
 |
 |3) Every restart must have a !null name; anonymous restarts
 |   are not supported.
 |#

(defClass HandlerFrame ()
  #|Instances of this class make up the condition and restart handler chains.
   |Each frame stores a list of <b>handlers</b> and an optional <b>parentFrame</b>.
   |
   |(type class extends Obj)
   |(slots (handlers parentFrame))
   |#
  (handlers parentFrame) )

(defClass ConditionHandler ()
  #|A condition handler is handling a particular <b>conditionClass</b> (can be `object' to handle all conditions).
   |The <b>handlerFunction</b> receives a signalled condition as its single argument.
   |
   |(type class extends Obj)
   |(slots (conditionClass handlerFunction))
   |#
  (conditionClass handlerFunction) )

(defClass RestartHandler ()
  #|A restart handler is handling a particular <b>restartName</b>.
   |The <b>handlerFunction</b> receives the arguments passed to `invokeRestart'.
   |The optional <b>interactiveFunction</b> is called by `invokeRestartInteractively'
   |and should prompt the user for required arguments.
   |The <b>associatedConditions</b> are a list of conditions with which this handler is associated.
   |If the list is empty, the handler is applicable to any condition.
   |If it's not empty, the handler is applicable only to conditions in the list.
   |
   |(type class extends Obj)
   |(slots (restartName handlerFunction interactiveFunction associatedConditions))
   |#
  (restartName handlerFunction interactiveFunction associatedConditions) )

(ddef *conditionHandlerFrame*
  #|An option holding the innermost condition handler frame.
   |#
  #null )

(ddef *restartHandlerFrame*
  #|An option holding the innermost restart handler frame.
   |#
  #null )

(def\ lispx::makeHandlerBindOperator (handlerSpecParser handlerFrameDynamic)
  #|Metaprogramming utility to create `handlerBind' and `restartBind'.
   |It is parameterized by a function that parses the handler specifications of the `handlerBind' and `restartBind' forms
   |and produces handlers from them, as well as the dynamic variable holding the handler chain
   |(the variable itself as a first class object, not its value, so it can be used with `progv').
   |
   |(fn handlerSpecParser handlerFrameDynamic)
   |(type function)
   |#
  (vau (handlerSpecs . forms) env
    (let1
      (handlerFrame
        (new HandlerFrame
          :handlers
             (map (\ (spec) (handlerSpecParser spec env)) handlerSpecs)
          :parentFrame
             (dget handlerFrameDynamic) ))
      (progv (handlerFrameDynamic) ((some handlerFrame))
        (apply begin forms env) ))))

(def handlerBind
  #|Establish condition handlers specified by <b>handlerSpecs</b> around <b>forms</b>.
   |
   |(fn handlerSpecs . forms)
   |(type fexpr)
   |
   |(syntax handlerSpecs (handlerSpec . handlerSpecs))
   |(syntax handlerSpec (conditionClass handlerFunction))
   |(syntax handlerSpec ((conditionClass . attributes) handlerFunction))
   |(syntax attributes (attribute value . attributes))
   |(syntax attribute (or Symbol Keyword String .Field @Method))
   |#
  (lispx::makeHandlerBindOperator
    (\ ((className functionForm) env)
      (new ConditionHandler
        :conditionClass
           (the (or Class (1 oo Class (or Intern AtDot) Any))
             (if (cons? className) (eval (cons 'list className) env) (eval className env)) )
        :handlerFunction
           (the Apv (eval functionForm env)) ))
    *conditionHandlerFrame* ))

(def restartBind
  #|Establish restart handlers specified by <b>handlerSpecs</b> around <b>forms</b>.
   |You should usually prefer `restartCase'.
   |
   |(fn handlerSpecs . forms)
   |(type fexpr)
   |
   |(syntax handlerSpecs (handlerSpec . handlerSpecs))
   |(syntax handlerSpec (restartName handlerFunction . properties))
   |(syntax properties (:interactiveFunction iFn . properties))
   |(syntax properties (:associatedConditions aCn . properties))
   |#
  (lispx::makeHandlerBindOperator
    (\ ((restartName functionForm . properties) env)
      (new RestartHandler
        :restartName
           (the Symbol restartName)
        :handlerFunction
           (the Apv (eval functionForm env))
        :interactiveFunction
           (whenOpt (iFn (optValue :interactiveFunction properties)) (some (the Apv (eval iFn env))))
        :associatedConditions
           (whenOpt (aCn (optValue :associatedConditions properties)) (the List (eval aCn env))) ))
    *restartHandlerFrame* ))


(def\ lispx::makeHandlerCaseOperator (handlerBindOperator)
  #|Metaprogramming utility to create `handlerCase' / `restartCase' from `handlerBind' / `restartBind'.
   |The `*-case' operators unwind the stack before a handler is called.
   |We do this with an outer exit and an inner trampoline, both wrapped around the original `*-bind' operator.
   |The original form's handler functions are replaced with functions that use the trampoline.
   |If a condition is signalled / a restart is invoked during the evaluation of the body forms,
   |they unwind the stack by jumping into the trampoline, and call the original handler function there.
   |If no condition is signalled / no restart is invoked, we return from the outer exit, ignoring the trampoline.
   |
   |(fn handlerBindOperator)
   |(type function)
   |#
  (vau (handlerSpecs . forms) env
    (block exit
      ((block trampoline
         (eval (list handlerBindOperator
                     (map (\ ((name functionForm . properties))
                             (list* name
                                    (\ args (returnFrom trampoline (\ () (apply (eval functionForm env) args))))
                                    ; permetterebbe functionForm arbitrarie che verrebbero restituite come valore dell'handler senza per√≤ definire l'handler
                                    ;(\ args (returnFrom trampoline (\ () (let1 (f (eval functionForm env)) (if (type? f Combinable) (apply f args env) f)) )))
                                    properties ))
                          handlerSpecs)
                     (list returnFrom exit (cons 'begin forms)) )
               env ))))))

(def handlerCase
  #|Like `handlerBind', but the stack is unwound before a handler function is called.
   |
   |(fn handlerSpecs . forms)
   |(type fexpr)
   |
   |(syntax handlerSpecs (handlerSpec . handlerSpecs))
   |(syntax handlerSpec (conditionClass handlerFunction))
   |(syntax handlerSpec ((conditionClass . attributes) handlerFunction))
   |(syntax attributes (attribute value . attributes))
   |(syntax attribute (or Symbol Keyword String .Field @Method))
   |#
  (lispx::makeHandlerCaseOperator handlerBind) )

(def restartCase
  #|Like `restartBind', but the stack is unwound before a handler function is called.
   |
   |(fn handlerSpecs . forms)
   |(type fexpr)
   |
   |(syntax handlerSpecs (handlerSpec . handlerSpecs))
   |(syntax handlerSpec (restartName handlerFunction . properties))
   |(syntax properties (:interactiveFunction iFn . properties))
   |(syntax properties (:associatedConditions aCn . properties))
   |#
  (lispx::makeHandlerCaseOperator restartBind) )


(def\ _signal_ (condition)
  #|Utility to signal the <b>condition</b>.
   |If the signal is unhandled, return #inert.
   |See `signal'.
   |
   |(fn condition)
   |(type function)
   |#
  (let1 signal (handlerFrame (dget *conditionHandlerFrame*))
    ;; Payload to `lispx::findHandler' is always #null for condition handlers.
    (ifOpt ((handler frame) (lispx::findHandler condition handlerFrame #null))
      (begin
        ;; Handler found; call it, passing along frame.
        (lispx::callConditionHandler handler frame condition)
        ;; Signal unhandled: continue search for handlers.
        (signal (getSlot frame 'parentFrame)))
      ;; No handler found, return #inert.
      #inert )))

(def\ lispx::callConditionHandler (handler handlerFrame condition)
  #|Call a condition <b>handler</b>'s handler function with the given <b>condition</b>.
   |During the call, the condition handler chain gets swapped to
   |that chain that was active at the time the handler was established.
   |This is the so-called "condition firewall".
   |The chain gets passed in as the value of <b>handlerFrame</b>.
   |
   |(fn handler handlerFrame condition)
   |(type function)
   |#
  (dlet1 (*conditionHandlerFrame* (getSlot handlerFrame 'parentFrame))
    (lispx::applyHandlerFunction handler (list condition)) ))

(def\ lispx::applyHandlerFunction (handler arguments)
  #|Utility to call a condition or restart <b>handler</b>'s handler function with a list of <b>arguments</b>.
   |
   |(fn handler arguments)
   |(type function)
   |#
  (apply (getSlot handler 'handlerFunction) arguments) )

(def\ _error_ (condition)
  #|Utility to signal the <b>condition</b>.
   |If the condition is unhandled, invoke the debugger. Therefore never returns normally.
   |See `error'.
   |
   |(fn condition)
   |(type function)
   |#
  (signal condition)
  (invokeDebugger condition) )


(def\ lispx::makeSignalWithRestartsOperator (signalOperator)
  #|Metaprogramming utility to create the `signal' / `error' operators that
   |take restart handlerSpecs from the `_signal_' / `_error_' ones that don't.
   |
   |(fn signalOperator)
   |(type function)
   |#
  (vau (condition . handlerSpecs) env
    (let1 (condition (eval condition env))
      (let1\
        (appendAssociatedCondition (handlerSpec)
          (append handlerSpec (list :associatedConditions (list 'list condition))) )
        (eval (list 'restartCase (map appendAssociatedCondition handlerSpecs)
                    (list signalOperator condition))
              env )))))

(def signal
  #|Signal the <b>condition</b>.
   |If the signal is unhandled, return #inert.
   |Restart handlers that are associated with the condition can be bound as per `restartCase'.
   |The handlers should not specify the `:associatedConditions' property, as it will be set automatically.
   |
   |(fn condition . handlerSpecs)
   |(type fexpr)
   |
   |(syntax handlerSpecs (handlerSpec . handlerSpecs))
   |(syntax handlerSpec (restartName handlerFunction . property))
   |(syntax property (:interactiveFunction iFn))
   |#
  (lispx::makeSignalWithRestartsOperator _signal_) )

(def error
  #|Signal the <b>condition</b>.
   |If the condition is unhandled, invoke the debugger. Therefore never returns normally.
   |Restart handlers that are associated with the condition can be bound as per `restartCase'.
   |The handlers should not specify the `:associatedConditions' property, as it will be set automatically.
   |
   |(fn condition . handlerSpecs)
   |(type fexpr)
   |
   |(syntax handlerSpecs (handlerSpec . handlerSpecs))
   |(syntax handlerSpec (restartName handlerFunction . property))
   |(syntax property (:interactiveFunction iFn))
   |#
  (lispx::makeSignalWithRestartsOperator _error_) )

(def\ invokeRestart (restartDesignator . arguments)
  #|Invoke the restart designated by <b>restartDesignator</b>, which can be a symbol or a `restartHandler', with the given <b>arguments</b>.
   |Signal an error if the restart is not found.
   |
   |(fn conrestartDesignator . arguments)
   |(type function)
   |#
  (lispx::invokeRestartWithArgumentsProducingFunction
   restartDesignator
   (\ (#ignore) arguments) ))

(def\ invokeRestartInteractively (restartDesignator)
  #|Invoke the restart designated by <b>restartDesignator</b>, which can be a symbol or a `RestartHandler',
   |by prompting the user for arguments via the restart's optional interactive function.
   |Signal an error if the restart is not found.
   |
   |(fn restartDesignator)
   |(type function)
   |#
  (lispx::invokeRestartWithArgumentsProducingFunction
    restartDesignator
    (\ (restartHandler)
      (whenOpt (iFn (getSlot restartHandler 'interactiveFunction))
        (iFn) ))))

(def\ lispx::invokeRestartWithArgumentsProducingFunction (restartDesignator function)
  #|Utility to invoke the restart designated by <b>restartDesignator</b>, which can be a symbol or a `RestartHandler',
   |with an arguments list produced by <b>function</b> (which receives a `restartHandler' as argument).
   |
   |(fn restartDesignator function)
   |(type function)
   |#
  (caseType restartDesignator
    (Symbol
      (ifOpt (restartHandler (findRestart restartDesignator))
        (lispx::applyHandlerFunction restartHandler (function restartHandler))
        (restartError restartDesignator)))
    (RestartHandler
      (lispx::applyHandlerFunction restartDesignator (function restartDesignator)))
    (else
      (typeError restartDesignator '(or Symbol RestartHandler) ) )))

(def\ lispx::findHandler (object handlerFrame payload)
  #|Utility to find both condition handlers and restart handlers.
   |The <b>object</b> can be either a condition or a restart name.
   |The <b>handlerFrame</b> is the handler frame where the search should start
   |(always the innermost handler frame at the start of the search).
   |
   |Return an option of the found handler and the frame establishing it as a two-element list.
   |The frame is needed so that we can access its parent in the implementation of the condition firewall (see `lispx::callConditionHandler').
   |
   |The <b>payload</b> parameter can be used to pass in an optional condition if we are looking for a restart handler (see `findRestart').
   |If we are looking for a condition handler, it is always #null.
   |
   |(fn object handlerFrame payload)
   |(type function)
   |#
  (whenOpt (handlerFrame handlerFrame)
    (block found
      (doList (handler (getSlot handlerFrame 'handlers))
        (when (lispx::handlerApplicable? handler object payload)
          (returnFrom found (some (list handler handlerFrame)))))
      (lispx::findHandler object (getSlot handlerFrame 'parentFrame) payload))))

(def\ findRestart (name . condition)
  #|Find a restart handler by <b>name</b>, optionally limited to restarts associated with a particular <b>condition</b>.
   |
   |(fn name . condition)
   |(type function)
   |#
  (whenOpt
    ( (handler #ignore)
        (lispx::findHandler name (dget *restartHandlerFrame*) condition) )
    (some handler) ))

(defGeneric lispx::handlerApplicable? (handler object payload)
  #|Return #true if a condition or restart <b>handler</b> is applicable, #false otherwise.
   |The <b>object</b> can be a condition or a restart name.
   |The <b>payload</b> is only used for restart handlers, is always #null for condition handlers.
   |
   |(fn handler object payload)
   |(type generic)
   |# )

(defMethod lispx::handlerApplicable? ((handler ConditionHandler) condition #null)
  #|A condition handler is applicable if the condition is an instance of its condition class.
   |
   |(fn (handler ConditionHandler) condition #null)
   |(type method)
   |#
  (let1 (conditionClass (getSlot handler 'conditionClass))
    (if (cons? conditionClass)
      (matchType? condition conditionClass)
      (type? condition conditionClass) )))

(defMethod lispx::handlerApplicable? ((handler RestartHandler) restartName condition)
  #|A restart handler is applicable to a restart name and optional condition ...
   |
   |(fn (handler RestartHandler) restartName condition)
   |(type method)
   |#
  ;; ...if the restart name matches the handler's restart name, and ...
  (&& (== restartName (getSlot handler 'restartName))
      ;; ...the handler is applicable to the condition.
      (lispx::restartHandlerApplicableToCondition? handler condition)))

(def\ lispx::restartHandlerApplicableToCondition? (handler condition)
  #|A restart handler is applicable to an optional condition ...
   |
   |(fn handler condition)
   |(type function)
   |#
  (ifOpt (condition condition)
    ;; ...if we are looking for restarts associated with a
    ;; particular condition...
    (let1 (aCn (getSlot handler 'associatedConditions))
      (if (null? aCn)
          ;; ...if the restart handler is not associated with
          ;; particular conditions,...
          #t
          ;; ...or if the condition we are looking is one of the
          ;; handler's associated conditions.
          (member? condition aCn)))
    ;; ...if we are not looking for restarts associated with a
    ;; particular condition then every handler is applicable.
    #t))

(def\ computeRestarts condition
  #|Return the list of currently active restarts, with most recently established ones first,
   |optionally limited to those that are explicitly associated with the supplied <b>condition</b>
   |or not associated with any condition.
   |
   |(fn . condition)
   |(type function)
   |#
  (let computeRestarts
    ( (restarts '())
      (handlerFrame (dget *restartHandlerFrame*)) )
    (ifOpt (handlerFrame handlerFrame)
      (computeRestarts
        (append restarts
          (remove
            (\ (restart) (not (lispx::restartHandlerApplicableToCondition? restart condition)))
            (getSlot handlerFrame 'handlers) ))
        (getSlot handlerFrame 'parentFrame) )
      restarts )))


(defClass RestartError (Error)
  #|Signalled when no handler for <b>restartName</b> is found.
   |
   |(type class extends Error)
   |#
  (restartName) )

(def\ makeRestartError (restartName)
  #|Create a new `restart-error' for the given <b>restartName</b>.
   |
   |(fn restartName)
   |(type function)
   |#
  (new RestartError :type 'restart :restartName restartName) )

(def\ restartError (restartName)
  #|Signal a new `restart-error'.
   |
   |(fn restartName)
   |(type function)
   |#
  (error (makeRestartError restartName)) )

;;;                                                     -*- Lisp -*-
;;; LispX Condition System
;;;

;; Copyright (c) 2021, 2022 Manuel J. Simoni

;; This file implements a condition system in the style of Common
;; Lisp.
;;
;; Implementation Notes
;; --------------------
;;
;; Condition handling and restart handling share some similarities
;; while also being quite different in other respects.
;;
;; The main similarities between condition and restart handling are:
;;
;; * Both condition and restart handlers are arranged in
;;   dynamically-bound handler chains, consisting of individual
;;   handler frames.  Each frame binds a number of handlers.  We use
;;   two dynamic variables, `*conditionHandlerFrame?*' and
;;   `*restartHandlerFrame?*', to point at the innermost frame of
;;   each chain.  Note that the variables hold options, as indicated
;;   by the question mark.
;;
;; * Signalling a condition and invoking a restart are very similar
;;   operations, in that a handler is looked up in the chain, and
;;   then its handler function is invoked.
;;
;; The main differences:
;;
;; * Conditions are classes organized in a type hierarchy
;;   (e.g. `type-error' as subtype of `error'), whereas restarts are
;;   plain names (e.g. `abort' and `continue').
;;
;; * A condition handler function always receives only a single
;;   argument, the condition, whereas a restart handler function
;;   receives any number of arguments passed to `invokeRestart'.
;;
;; * A condition handler function may decline handling a condition by
;;   returning normally instead of performing a nonlocal exit; this
;;   causes the search for a handler to continue.  In contrast, if a
;;   restart handler function returns normally, the restart is
;;   considered handled, and its result value is returned from
;;   `invokeRestart'.
;;
;; * A restart handler may optionally have an interactive function
;;   that prompts the user for arguments when the restart is invoked
;;   by `invokeRestartInteractively'.
;;
;; * A restart handler may optionally be associated with a list of
;;   conditions, to tell apart restarts belonging to different,
;;   concurrently signalled conditions.
;;
;; We follow the Common Lisp condition system quite closely (including
;; details like the condition firewall), with some minor differences:
;;
;; 1) For simplicity, the syntaxes of `handlerCase' and
;;    `restartCase' are equal to the syntaxes of the lower-level
;;    `handlerBind' and `restartBind' functions.  There is no extra
;;    "user interface" processing for the higher-level functions.
;;
;;    Likewise, `signal' and `error' do not support creating simple
;;    conditions from formatting strings and arguments, you must
;;    always pass in a fully formed condition yourself.
;;
;; 2) There is no `with-condition-restarts'.  Instead there is an
;;    additional keyword, `:associatedConditions', in the
;;    handlerSpecs of `restartBind' and `restartCase' that
;;    establishes the associations.
;;
;;    Alternatively, `signal' and `error' also support the
;;    establishment of restart handlers associated with the signalled
;;    condition.
;;
;;    A call to `signal' (or `error') with restart handler specs like:
;;
;;    (signal some-condition
;;      (continue (\ () ...)))
;;
;;    is equivalent to:
;;
;;    (restartCase ((continue (\ () ...)
;;                             :associatedConditions (list some-condition)))
;;      (signal some-condition))
;;
;; 3) Every restart must have a non-nil name; anonymous restarts
;;    are not supported.

(defClass HandlerFrame ()
  #|Instances of this class make up the condition and
   |restart handler chains.  Each frame stores a list of HANDLERS and an
   |optional PARENT-FRAME?.
   |#
  (handlers parentFrame?) )

(defClass ConditionHandler ()
  #|A condition handler is handling a particular
   |CONDITION-CLASS (can be `object' to handle all conditions).  The
   |HANDLER-FUNCTION receives a signalled condition as its single
   |argument.
   |#
  (conditionClass handlerFunction) )

(defClass RestartHandler ()
  #|A restart handler is handling a particular
   |RESTART-NAME.  The HANDLER-FUNCTION receives the arguments passed to
   |`invokeRestart'.  The optional INTERACTIVE-FUNCTION? is called by
   |`invokeRestartInteractively' and should prompt the user for required
   |arguments.  The ASSOCIATED-CONDITIONS are a list of conditions with
   |which this handler is associated.  If the list is empty, the handler
   |is applicable to any condition.  If it's not empty, the handler is
   |applicable only to conditions in the list.
   |#
  (restartName handlerFunction interactiveFunction? associatedConditions) )

(ddef *conditionHandlerFrame?*
  #|An option holding the innermost condition handler frame.
   |#
  #null )

(ddef *restartHandlerFrame?*
  #|An option holding the innermost restart handler frame.
   |#
  #null )

(def\ lispx::makeHandlerBindOperator (handlerSpecParser handlerFrameDynamic)
  #|Metaprogramming utility to create `handlerBind' and `restartBind'.
   |It is parameterized by a function that parses the handler
   |specifications of the `handlerBind' and `restartBind' forms and
   |produces handlers from them, as well as the dynamic variable holding
   |the handler chain (the variable itself as a first class object, not
   |its value, so it can be used with `progv').
   |#
  (vau (handlerSpecs . forms) env
    (let1
      (handlerFrame
        (new HandlerFrame
          :handlers
             (map (\ (spec) (handlerSpecParser spec env)) handlerSpecs)
          :parentFrame?
             (dget handlerFrameDynamic) ))
      (progv (handlerFrameDynamic) ((some handlerFrame))
        (eval (cons 'begin forms) env) ))))

(def handlerBind
  #|Establish condition handlers specified by HANDLER-SPECS around FORMS.
   |$(type fexpr)
   |$(fn (handlerSpecs . forms))
   |$(syntax handlerSpecs (conditionClass handlerFunction))
   |#
  (lispx::makeHandlerBindOperator
    (\ ((className functionForm) env)
      (new ConditionHandler
        :conditionClass
           (the+ (or Class (1 oo Class (or Intern AtDot) Any))
             (if (cons? className) (eval (cons 'list className) env) (eval className env)) )
        :handlerFunction
           (the Function (eval functionForm env)) ))
    *conditionHandlerFrame?* ))

(def restartBind
  #|Establish restart handlers specified by HANDLER-SPECS around FORMS.
   |You should usually prefer `restartCase'.
   |$(type fexpr)
   |$(fn (handlerSpecs . forms))
   |$(syntax handlerSpecs (restartName handlerFunction . properties))
   |$(syntax properties (&key interactiveFunction associatedConditions))
   |#
  (lispx::makeHandlerBindOperator
    (\ ((restartName functionForm . properties) env)
      (new RestartHandler
        :restartName
           (the Symbol restartName)
        :handlerFunction
           (the Function (eval functionForm env))
        :interactiveFunction?
           (whenOpt? (iFnForm (get? :interactiveFunction properties)) (some (the Function (eval iFnForm env))))
        :associatedConditions
           (whenOpt? (aCnForm (get? :associatedConditions properties)) (the List (eval aCnForm env))) ))
    *restartHandlerFrame?* ))


(def\ lispx::makeHandlerCaseOperator (handlerBindOperator)
  #|Metaprogramming utility to create `handlerCase' / `restartCase' from `handlerBind' / `restartBind'.
   |The `*-case' operators unwind the stack before a handler is called.
   |We do this with an outer exit and an inner trampoline, both wrapped around the original `*-bind' operator.
   |The original form's handler functions are replaced with functions that use the trampoline.
   |If a condition is signalled / a restart is invoked during the evaluation of the body forms,
   |they unwind the stack by jumping into the trampoline, and call the original handler function there.
   |If no condition is signalled / no restart is invoked, we return from the outer exit, ignoring the trampoline.
   |#
  (vau (handlerSpecs . forms) env
    (block exit
      ((block trampoline
         (eval (list handlerBindOperator
                     (map (\ ((name functionForm . properties))
                             (list* name
                                    (\ args (returnFrom trampoline (\ () (apply (eval functionForm env) args))))
                                    properties ))
                          handlerSpecs)
                     (list returnFrom exit (cons 'begin forms)) )
               env ))))))

(def handlerCase
  #|Like `handlerBind', but the stack is unwound before a handler function is called.
   |$(type fexpr)
   |$(fn (handlerSpecs . forms))
   |#
  (lispx::makeHandlerCaseOperator handlerBind) )

(def restartCase
  #|Like `restartBind', but the stack is unwound before a handler function is called.
   |$(type fexpr)
   |$(fn (handlerSpecs . forms))
   |#
  (lispx::makeHandlerCaseOperator restartBind) )


(def\ _signal_ (condition)
  #|Utility to signal the CONDITION.  If the signal is unhandled,
   |return void.  See `signal'.
   |#
  (let1 signal (handlerFrame? (dget *conditionHandlerFrame?*))
    ;; Payload to `lispx::findHandler?' is always nil for condition handlers.
    (ifOpt? ((handler frame) (lispx::findHandler? condition handlerFrame? #null))
      (begin
        ;; Handler found; call it, passing along frame.
        (lispx::callConditionHandler handler frame condition)
        ;; Signal unhandled: continue search for handlers.
        (signal (getSlot frame 'parentFrame?)))
      ;; No handler found, return void.
      #inert )))

(def\ lispx::callConditionHandler (handler handlerFrame condition)
  #|Call a condition HANDLER's handler function with the given
   |CONDITION.  During the call, the condition handler chain gets swapped
   |to that chain that was active at the time the handler was established.
   |This is the so-called "condition firewall".  The chain gets passed
   |in as the value of HANDLER-FRAME.
   |#
  (dlet ((*conditionHandlerFrame?* (getSlot handlerFrame 'parentFrame?)))
    (lispx::applyHandlerFunction handler (list condition)) ))

(def\ lispx::applyHandlerFunction (handler arguments)
  #|Utility to call a condition or restart HANDLER's handler function
   |with a list of ARGUMENTS.
   |#
  (apply (getSlot handler 'handlerFunction) arguments) )

(def\ _error_ (condition)
  #|Utility to signal the CONDITION.  If the condition is unhandled,
   |invoke the debugger.  Therefore never returns normally.  See `error'.
   |#
  (signal condition)
  (invokeDebugger condition) )


(def\ lispx::makeSignalWithRestartsOperator (signalOperator)
  #|Metaprogramming utility to create the `signal' / `error' operators
   |that take restart handlerSpecs from the `_signal_' / `_error_' ones
   |that don't.
   |#
  (vau (condition . handlerSpecs) env
    (let1 (condition (eval condition env))
      (let1\ (appendAssociatedCondition (handlerSpec)
               (append handlerSpec (list :associatedConditions (list 'list condition))) )
        (eval (list 'restartCase (map appendAssociatedCondition handlerSpecs)
                    (list signalOperator condition))
              env )))))

(def signal
  #|Signal the CONDITION.  If the signal is unhandled, return void.
   |Restart handlers that are associated with the condition can be bound
   |as per `restartCase'.  The handlers should not specify the
   |`:associatedConditions' property, as it will be set automatically.
   |$(type fexpr)
   |$(fn (condition . handlerSpecs))
   |#
  (lispx::makeSignalWithRestartsOperator _signal_) )

(def error
  #|Signal the CONDITION.  If the condition is unhandled, invoke the
   |debugger.  Therefore never returns normally.
   |Restart handlers that are associated with the condition can be bound
   |as per `restartCase'.  The handlers should not specify the
   |`:associatedConditions' property, as it will be set automatically.
   |$(type fexpr)
   |$(fn (condition . handlerSpecs))
   |#
  (lispx::makeSignalWithRestartsOperator _error_) )

(def\ invokeRestart (restartDesignator . arguments)
  #|Invoke the restart designated by RESTART-DESIGNATOR, which can be a
   |symbol or a `restartHandler', with the given ARGUMENTS.  Signal an
   |error if the restart is not found.
   |#
  (lispx::invokeRestartWithArgumentsProducingFunction
   restartDesignator
   (\ (#ignore) arguments) ))

(def\ invokeRestartInteractively (restartDesignator)
  #|Invoke the restart designated by RESTART-DESIGNATOR, which can be a
   |symbol or a `restartHandler', by prompting the user for arguments via
   |the restart's optional interactive function.  Signal an error if the
   |restart is not found.
   |#
  (lispx::invokeRestartWithArgumentsProducingFunction
    restartDesignator
    (\ (restartHandler)
      (whenOpt? (iFn (getSlot restartHandler 'interactiveFunction?))
        (iFn) ))))

(def\ lispx::invokeRestartWithArgumentsProducingFunction (restartDesignator function)
  #|Utility to invoke the restart designated by RESTART-DESIGNATOR,
   |which can be a symbol or a `RestartHandler', with an arguments list
   |produced by FUNCTION (which receives a `restartHandler' as argument).
   |#
  (caseType restartDesignator
    (Symbol
      (ifOpt? (restartHandler (findRestart? restartDesignator))
        (lispx::applyHandlerFunction restartHandler (function restartHandler))
        (restartError restartDesignator)))
    (RestartHandler
      (lispx::applyHandlerFunction restartDesignator (function restartDesignator)))
    (else
      (typeError restartDesignator '(or Symbol RestartHandler) ) )))

(def\ lispx::findHandler? (object handlerFrame? payload?)
  #|Utility to find both condition handlers and restart handlers.
   |The OBJECT can be either a condition or a restart name.  The
   |HANDLER-FRAME? is the handler frame where the search should start
   |(always the innermost handler frame at the start of the search).
   |
   |Return an option of the found handler and the frame establishing it as
   |a two-element list.  The frame is needed so that we can access its
   |parent in the implementation of the condition firewall (see
   |`lispx::callConditionHandler').
   |
   |The PAYLOAD? parameter can be used to pass in an optional condition if
   |we are looking for a restart handler (see `findRestart?').  If we are
   |looking for a condition handler, it is always nil.
   |#
  (whenOpt? (handlerFrame handlerFrame?)
    (block found
      (dolist (handler (getSlot handlerFrame 'handlers))
        (when (lispx::handlerApplicable? handler object payload?)
          (returnFrom found (some (list handler handlerFrame)))))
      (lispx::findHandler? object (getSlot handlerFrame 'parentFrame?) payload?))))

(def\ findRestart? (name . condition?)
  #|Find a restart handler by NAME, optionally limited to restarts
   |associated with a particular CONDITION?.
   |#
  (whenOpt?
    ( (handler #ignore)
        (lispx::findHandler? name (dget *restartHandlerFrame?*) condition?) )
    (some handler) ))

(defGeneric lispx::handlerApplicable? (handler object payload?)
  #|Return true if a condition or restart HANDLER is
   |applicable, false otherwise.  The OBJECT can be a condition or a
   |restart name.  The PAYLOAD? is only used for restart handlers, and
   |always nil for condition handlers.
   |#)

(defMethod lispx::handlerApplicable? ((handler ConditionHandler) condition #null)
  #|A condition handler is applicable if the condition is an instance
   |of its condition class.
   |#
  (let1 (conditionClass (getSlot handler 'conditionClass))
    (if (cons? conditionClass)
      (matchObj? condition conditionClass)
      (type? condition conditionClass) )))

(defMethod lispx::handlerApplicable? ((handler RestartHandler) restartName condition?)
  #|A restart handler is applicable to a restart name and optional condition...
   |#
  ;; ...if the restart name matches the handler's restart name, and...
  (&& (== restartName (getSlot handler 'restartName))
      ;; ...the handler is applicable to the condition.
      (lispx::restartHandlerApplicableToCondition? handler condition?)))

(def\ lispx::restartHandlerApplicableToCondition? (handler condition?)
  #|A restart handler is applicable to an optional condition...
   |#
  (ifOpt? (condition condition?)
    ;; ...if we are looking for restarts associated with a
    ;; particular condition...
    (let1 (aCn (getSlot handler 'associatedConditions))
      (if (null? aCn)
          ;; ...if the restart handler is not associated with
          ;; particular conditions,...
          #t
          ;; ...or if the condition we are looking is one of the
          ;; handler's associated conditions.
          (cons? (member condition aCn))))
    ;; ...if we are not looking for restarts associated with a
    ;; particular condition then every handler is applicable.
    #t))

(def\ computeRestarts condition?
  #|Return the list of currently active restarts, with most recently
   |established ones first, optionally limited to those that are
   |explicitly associated with the supplied CONDITION? or not associated
   |with any condition.
   |#
  (let computeRestarts 
    ( (restarts '())
      (handlerFrame? (dget *restartHandlerFrame?*)) )
    (ifOpt? (handlerFrame handlerFrame?)
      (computeRestarts
        (append restarts
          (remove
            (\ (restart) (not (lispx::restartHandlerApplicableToCondition? restart condition?)))
            (getSlot handlerFrame 'handlers) ))
        (getSlot handlerFrame 'parentFrame?) )
      restarts )))

(defClass RestartError (Error)
  #|Signalled when no handler for RESTART-NAME is found.
   |#
  (restartName) )

(def\ makeRestartError (restartName)
  #|Create a new `restart-error' for the given RESTART-NAME.
   |#
  (new RestartError :type 'restart :restartName restartName) )

(def\ restartError (restartName)
  #|Signal a new `restart-error'.
   |#
  (error (makeRestartError restartName)) )


(defClass SimpleError (Error)
  #|Class for simple errors with a MESSAGE.
   |#
  (message) )

(def\ makeSimpleError (message)
  #|Create a new simple error with a MESSAGE.
   |#
  (new SimpleError message :type 'simple) )

(def\ simpleError (message)
  #|Signal a simple error with a MESSAGE.
   |#
  (error (makeSimpleError message)) )

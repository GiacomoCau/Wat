;;;                                                     -*- Lisp -*-
;;; LispX JavaScript Interface
;;;

;; Copyright (c) 2021, 2022 Manuel J. Simoni

(def\ js-== (a b)
  #|Return true if the values A and B are equal per JavaScript's strict equality, false otherwise.
   |#
  (== a b))

(def\ apply-js-function (js-function arguments)
  #|Call JS-FUNCTION with a list of ARGUMENTS.
   |#
  (apply (to-lisp-function js-function) arguments))

(def\ call-js-function (js-function . arguments)
  #|Call JS-FUNCTION with the rest ARGUMENTS.
   |#
  (apply-js-function js-function arguments))

(defMacro js-\ (parameterTree . forms)
  #|Construct a \ with the given PARAMETER-TREE and body FORMS that's callable from JS.
   |#
  (list to-js-function
    (list \ parameterTree
      ;; This mirrors eval_form() in control.mjs.
      ;; Check the docs there for an explanation.
      (list pushSubcontBarrier
        (list* pushPrompt 'rootPrompt forms) ))))

(def\ js-global (name)
  #|Access a JS global by NAME (a string).
   |Return undefined if the global doesn't exist.
   |#
  (%js-global name))

(def\ js-new (constructor . arguments)
  #|Call the JS CONSTRUCTOR function with ARGUMENTS.
   |#
  (apply %js-new (cons constructor arguments)))

(def\ js-get (object name)
  #|Access a property of a JS object by NAME (a string).
   |#
  (%js-get object name))

(def\ to-lisp-boolean (js-boolean)
  #|Convert the JS-BOOLEAN to a Lisp boolean.
   |#
  (%to-lisp-boolean js-boolean))

(def\ to-js-boolean (lisp-boolean)
  #|Convert the LISP-BOOLEAN to a JS boolean.
   |#
  (%to-js-boolean lisp-boolean))

(def\ to-lisp-number (js-number)
  #|Convert the JS-NUMBER to a Lisp number.
   |#
  (%to-lisp-number js-number))

(def\ to-js-number (lisp-number)
  #|Convert the LISP-NUMBER to a JS number.
   |#
  (%to-js-number lisp-number))

(def\ to-lisp-string (js-string)
  #|Convert the JS-STRING to a Lisp string.
   |#
  (%to-lisp-string js-string))

(def\ to-js-string (lisp-string)
  #|Convert the LISP-STRING to a JS string.
   |#
  (%to-js-string lisp-string))

(def\ to-lisp-function (js-function)
  #|Convert the JS-FUNCTION to a Lisp function.
   |#
  (%to-lisp-function js-function))

(def\ to-js-function (lisp-operator)
  #|Convert the LISP-OPERATOR to a JS function.
   |#
  (%to-js-function lisp-operator))

(def\ list-to-js-array (list)
  #|Turn a list into a JS array.
   |#
  (%list-to-js-array list))

(def\ js-array-to-list (array)
  #|Turn a JS array into a list.
   |#
  (%js-array-to-list array))

(def\ js-array elements
  #|Create a new JS array from the given elements.
   |#
  (list-to-js-array elements))

(defMethod elt ((seq object) index)
  #|`elt' for JS arrays.
   |We must put the method on `object' because we don't have a more precise type for them.
   |#
  (if (|| (< index 0) (>= index (length seq)))
      (error (new Error :type 'outOfBounds))
      (%js-elt seq index)))

(defMethod length ((seq object))
  #|`length' for JS arrays.
   |#
  (to-lisp-number (js-get seq "length")))

(def\ apply-js-method (receiver name arguments)
  #|Invoke a JS method by NAME (a string) on the RECEIVER object,
   |passing along the list of ARGUMENTS.
   |#
  (%apply-js-method receiver name arguments))

(def\ call-js-method (receiver name . arguments)
  #|Invoke a JS method by NAME (a string) on the RECEIVER object,
   |passing along the rest ARGUMENTS.
   |#
  (apply apply-js-method (list receiver name arguments)))

(def\ js-method (methodName)
  #|Create a function that when called will call the specified method.
   |#
  (\ (receiver . arguments)
    (apply-js-method receiver methodName arguments)))

(defMacro define-js-method (name methodName)
  #|Define a new function with the given NAME (a symbol) that invokes a JS method named METHOD-NAME (a string).
   |The function takes one or more arguments.
   |The first argument is the receiver of the method call (\"this\"),
   |the rest are the normal method arguments.
   |#
  (list def name (js-method methodName)))

(def\ js-undefined-option (value)
  #|Turn a value that may be undefined into an option.
   |#
  (if (== value +js-undefined+)
      #null
      (some value)))

(def\ js-null-option (value)
  #|Turn a value that may be null into an option.
   |#
  (if (== value +js-null+)
      #null
      (some value)))

(def\ await (promise)
  #|Wait for the PROMISE to become fulfilled or rejected.
   |#
  ;; Capture to the default prompt, and...
  (yield k
    ;; ...return a new promise there.  From the caller's perspective,
    ;; we are now paused -- but from context's perspective, we are
    ;; returning a promise.  See `deftest' for how this nicely
    ;; interacts with promise-based test frameworks.
    (call-js-method promise "then"
      (js-\ (value)
        ;; When the original promise is fulfilled with a
        ;; value, reinstate the continuation, returning
        ;; the value where `await' was called.
        (resume k value) )
      (js-\ (error)
        ;; When the original promise is rejected,
        ;; reinstate the continuation, signalling an
        ;; error where `await' was called.
        (resume k (error error)) ))))

(def\ sync (fun)
  #|Create a function that will await an underlying function.
   |#
  (\ args (await (apply fun args))))

(defMacro define-js-method/sync (name methodName)
  #|Like `define-js-method', but awaits the method result.
   |#
  (list def name (sync (js-method methodName))))

(def\ sleep (ms)
  #|Sleep for some milliseconds.
   |#
  (await (%sleep ms)))

(def\ js-log arguments
  #|Log the ARGUMENTS to the JS console.
   |#
  (apply %js-log arguments))
